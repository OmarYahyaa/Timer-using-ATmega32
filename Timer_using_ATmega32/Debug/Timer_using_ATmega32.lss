
Timer_using_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00002c74  00002ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002f58  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000139f  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00007027  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00007167  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000072d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000abb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ad18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000afa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 97 11 	call	0x232e	; 0x232e <main>
      7a:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e7       	ldi	r26, 0x75	; 117
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e7       	ldi	r24, 0x75	; 117
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_enSetPinDirection>:
#include <MDIO_register.h>
#include <MDIO_private.h>
#include <MDIO_config.h>
#include <MDIO_interface.h>

ErrorState_t MDIO_enSetPinDirection(Pin_t copy_enPin,Direction_t copy_enDirection) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8c 83       	std	Y+4, r24	; 0x04
     b4c:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState_t Local_enState = SUCCESS;
     b4e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
     b50:	8c 81       	ldd	r24, Y+4	; 0x04
     b52:	9a e0       	ldi	r25, 0x0A	; 10
     b54:	69 2f       	mov	r22, r25
     b56:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin  = copy_enPin % 10;
     b5c:	8c 81       	ldd	r24, Y+4	; 0x04
     b5e:	9a e0       	ldi	r25, 0x0A	; 10
     b60:	69 2f       	mov	r22, r25
     b62:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
     b66:	89 2f       	mov	r24, r25
     b68:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8Port) {
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3f 83       	std	Y+7, r19	; 0x07
     b72:	2e 83       	std	Y+6, r18	; 0x06
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <MDIO_enSetPinDirection+0x4a>
     b7e:	4a c0       	rjmp	.+148    	; 0xc14 <MDIO_enSetPinDirection+0xde>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	23 30       	cpi	r18, 0x03	; 3
     b86:	31 05       	cpc	r19, r1
     b88:	34 f4       	brge	.+12     	; 0xb96 <MDIO_enSetPinDirection+0x60>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	71 f0       	breq	.+28     	; 0xbb0 <MDIO_enSetPinDirection+0x7a>
     b94:	d5 c0       	rjmp	.+426    	; 0xd40 <MDIO_enSetPinDirection+0x20a>
     b96:	2e 81       	ldd	r18, Y+6	; 0x06
     b98:	3f 81       	ldd	r19, Y+7	; 0x07
     b9a:	23 30       	cpi	r18, 0x03	; 3
     b9c:	31 05       	cpc	r19, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <MDIO_enSetPinDirection+0x6c>
     ba0:	6b c0       	rjmp	.+214    	; 0xc78 <MDIO_enSetPinDirection+0x142>
     ba2:	8e 81       	ldd	r24, Y+6	; 0x06
     ba4:	9f 81       	ldd	r25, Y+7	; 0x07
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <MDIO_enSetPinDirection+0x78>
     bac:	97 c0       	rjmp	.+302    	; 0xcdc <MDIO_enSetPinDirection+0x1a6>
     bae:	c8 c0       	rjmp	.+400    	; 0xd40 <MDIO_enSetPinDirection+0x20a>
	case PORTA:
		if (OUTPUT == copy_enDirection) {
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	a1 f4       	brne	.+40     	; 0xbde <MDIO_enSetPinDirection+0xa8>
			SET_BIT(REG_DDRA, Local_u8Pin);
     bb6:	aa e3       	ldi	r26, 0x3A	; 58
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	ea e3       	ldi	r30, 0x3A	; 58
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	48 2f       	mov	r20, r24
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <MDIO_enSetPinDirection+0x9e>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <MDIO_enSetPinDirection+0x9a>
     bd8:	84 2b       	or	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	b3 c0       	rjmp	.+358    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	88 23       	and	r24, r24
     be2:	a9 f4       	brne	.+42     	; 0xc0e <MDIO_enSetPinDirection+0xd8>
			CLR_BIT(REG_DDRA, Local_u8Pin);
     be4:	aa e3       	ldi	r26, 0x3A	; 58
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ea e3       	ldi	r30, 0x3A	; 58
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <MDIO_enSetPinDirection+0xcc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <MDIO_enSetPinDirection+0xc8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	9b c0       	rjmp	.+310    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8b 83       	std	Y+3, r24	; 0x03
     c12:	98 c0       	rjmp	.+304    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	case PORTB:
		if (OUTPUT == copy_enDirection) {
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	a1 f4       	brne	.+40     	; 0xc42 <MDIO_enSetPinDirection+0x10c>
			SET_BIT(REG_DDRB, Local_u8Pin);
     c1a:	a7 e3       	ldi	r26, 0x37	; 55
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e7 e3       	ldi	r30, 0x37	; 55
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	48 2f       	mov	r20, r24
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <MDIO_enSetPinDirection+0x102>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <MDIO_enSetPinDirection+0xfe>
     c3c:	84 2b       	or	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	81 c0       	rjmp	.+258    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	88 23       	and	r24, r24
     c46:	a9 f4       	brne	.+42     	; 0xc72 <MDIO_enSetPinDirection+0x13c>
			CLR_BIT(REG_DDRB, Local_u8Pin);
     c48:	a7 e3       	ldi	r26, 0x37	; 55
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e7 e3       	ldi	r30, 0x37	; 55
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	48 2f       	mov	r20, r24
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 2e       	mov	r0, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <MDIO_enSetPinDirection+0x130>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <MDIO_enSetPinDirection+0x12c>
     c6a:	80 95       	com	r24
     c6c:	84 23       	and	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	69 c0       	rjmp	.+210    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	66 c0       	rjmp	.+204    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	case PORTC:
		if (OUTPUT == copy_enDirection) {
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	a1 f4       	brne	.+40     	; 0xca6 <MDIO_enSetPinDirection+0x170>
			SET_BIT(REG_DDRC, Local_u8Pin);
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <MDIO_enSetPinDirection+0x166>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <MDIO_enSetPinDirection+0x162>
     ca0:	84 2b       	or	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	4f c0       	rjmp	.+158    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	88 23       	and	r24, r24
     caa:	a9 f4       	brne	.+42     	; 0xcd6 <MDIO_enSetPinDirection+0x1a0>
			CLR_BIT(REG_DDRC, Local_u8Pin);
     cac:	a4 e3       	ldi	r26, 0x34	; 52
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e4 e3       	ldi	r30, 0x34	; 52
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <MDIO_enSetPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <MDIO_enSetPinDirection+0x190>
     cce:	80 95       	com	r24
     cd0:	84 23       	and	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	37 c0       	rjmp	.+110    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	34 c0       	rjmp	.+104    	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	case PORTD:
		if (OUTPUT == copy_enDirection) {
     cdc:	8d 81       	ldd	r24, Y+5	; 0x05
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	a1 f4       	brne	.+40     	; 0xd0a <MDIO_enSetPinDirection+0x1d4>
			SET_BIT(REG_DDRD, Local_u8Pin);
     ce2:	a1 e3       	ldi	r26, 0x31	; 49
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e1 e3       	ldi	r30, 0x31	; 49
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <MDIO_enSetPinDirection+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <MDIO_enSetPinDirection+0x1c6>
     d04:	84 2b       	or	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	1d c0       	rjmp	.+58     	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else if (INPUT == copy_enDirection) {
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	88 23       	and	r24, r24
     d0e:	a9 f4       	brne	.+42     	; 0xd3a <MDIO_enSetPinDirection+0x204>
			CLR_BIT(REG_DDRD, Local_u8Pin);
     d10:	a1 e3       	ldi	r26, 0x31	; 49
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e1 e3       	ldi	r30, 0x31	; 49
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <MDIO_enSetPinDirection+0x1f8>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <MDIO_enSetPinDirection+0x1f4>
     d32:	80 95       	com	r24
     d34:	84 23       	and	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8b 83       	std	Y+3, r24	; 0x03
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <MDIO_enSetPinDirection+0x20e>
		}
		break;
	default:
		Local_enState = OUT_OF_RANGE_ERR;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8b 83       	std	Y+3, r24	; 0x03
		break;
	} // switch
	return Local_enState;
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d46:	27 96       	adiw	r28, 0x07	; 7
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <MDIO_enSetPortDirection>:

ErrorState_t MDIO_enSetPortDirection(Port_t copy_enPort, u8 copy_u8Value) {
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <MDIO_enSetPortDirection+0x6>
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <MDIO_enSetPortDirection+0x8>
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	8a 83       	std	Y+2, r24	; 0x02
     d68:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
     d6a:	19 82       	std	Y+1, r1	; 0x01
	if ((0 > copy_u8Value) || (255 < copy_u8Value)) {
		Local_enState = OUT_OF_RANGE_ERR;
	} else {
		switch (copy_enPort) {
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3d 83       	std	Y+5, r19	; 0x05
     d74:	2c 83       	std	Y+4, r18	; 0x04
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	91 05       	cpc	r25, r1
     d7e:	d9 f0       	breq	.+54     	; 0xdb6 <MDIO_enSetPortDirection+0x5e>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	23 30       	cpi	r18, 0x03	; 3
     d86:	31 05       	cpc	r19, r1
     d88:	34 f4       	brge	.+12     	; 0xd96 <MDIO_enSetPortDirection+0x3e>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	91 05       	cpc	r25, r1
     d92:	61 f0       	breq	.+24     	; 0xdac <MDIO_enSetPortDirection+0x54>
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <MDIO_enSetPortDirection+0x7c>
     d96:	2c 81       	ldd	r18, Y+4	; 0x04
     d98:	3d 81       	ldd	r19, Y+5	; 0x05
     d9a:	23 30       	cpi	r18, 0x03	; 3
     d9c:	31 05       	cpc	r19, r1
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <MDIO_enSetPortDirection+0x68>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	84 30       	cpi	r24, 0x04	; 4
     da6:	91 05       	cpc	r25, r1
     da8:	81 f0       	breq	.+32     	; 0xdca <MDIO_enSetPortDirection+0x72>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <MDIO_enSetPortDirection+0x7c>
		case PORTA: // PORTA
			REG_DDRA = copy_u8Value;
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	80 83       	st	Z, r24
     db4:	11 c0       	rjmp	.+34     	; 0xdd8 <MDIO_enSetPortDirection+0x80>
			break;
		case PORTB: // PORTB
			REG_DDRB = copy_u8Value;
     db6:	e7 e3       	ldi	r30, 0x37	; 55
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	80 83       	st	Z, r24
     dbe:	0c c0       	rjmp	.+24     	; 0xdd8 <MDIO_enSetPortDirection+0x80>
			break;
		case PORTC: // PORTC
			REG_DDRC = copy_u8Value;
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 83       	st	Z, r24
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <MDIO_enSetPortDirection+0x80>
			break;
		case PORTD: // PORTD
			REG_DDRD = copy_u8Value;
     dca:	e1 e3       	ldi	r30, 0x31	; 49
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 83       	st	Z, r24
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MDIO_enSetPortDirection+0x80>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	89 83       	std	Y+1, r24	; 0x01
			break;
		} // switch
	} // else
	return Local_enState;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <MDIO_enSetPinValue>:

ErrorState_t MDIO_enSetPinValue(Pin_t copy_enPin, Value_t copy_enValue) {
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	27 97       	sbiw	r28, 0x07	; 7
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	8c 83       	std	Y+4, r24	; 0x04
     e00:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState_t Local_enState = SUCCESS;
     e02:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9a e0       	ldi	r25, 0x0A	; 10
     e08:	69 2f       	mov	r22, r25
     e0a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin  = copy_enPin % 10;
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9a e0       	ldi	r25, 0x0A	; 10
     e14:	69 2f       	mov	r22, r25
     e16:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
     e1a:	89 2f       	mov	r24, r25
     e1c:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8Port) {
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3f 83       	std	Y+7, r19	; 0x07
     e26:	2e 83       	std	Y+6, r18	; 0x06
     e28:	8e 81       	ldd	r24, Y+6	; 0x06
     e2a:	9f 81       	ldd	r25, Y+7	; 0x07
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <MDIO_enSetPinValue+0x4a>
     e32:	4a c0       	rjmp	.+148    	; 0xec8 <MDIO_enSetPinValue+0xde>
     e34:	2e 81       	ldd	r18, Y+6	; 0x06
     e36:	3f 81       	ldd	r19, Y+7	; 0x07
     e38:	23 30       	cpi	r18, 0x03	; 3
     e3a:	31 05       	cpc	r19, r1
     e3c:	34 f4       	brge	.+12     	; 0xe4a <MDIO_enSetPinValue+0x60>
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	9f 81       	ldd	r25, Y+7	; 0x07
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	91 05       	cpc	r25, r1
     e46:	71 f0       	breq	.+28     	; 0xe64 <MDIO_enSetPinValue+0x7a>
     e48:	d5 c0       	rjmp	.+426    	; 0xff4 <MDIO_enSetPinValue+0x20a>
     e4a:	2e 81       	ldd	r18, Y+6	; 0x06
     e4c:	3f 81       	ldd	r19, Y+7	; 0x07
     e4e:	23 30       	cpi	r18, 0x03	; 3
     e50:	31 05       	cpc	r19, r1
     e52:	09 f4       	brne	.+2      	; 0xe56 <MDIO_enSetPinValue+0x6c>
     e54:	6b c0       	rjmp	.+214    	; 0xf2c <MDIO_enSetPinValue+0x142>
     e56:	8e 81       	ldd	r24, Y+6	; 0x06
     e58:	9f 81       	ldd	r25, Y+7	; 0x07
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <MDIO_enSetPinValue+0x78>
     e60:	97 c0       	rjmp	.+302    	; 0xf90 <MDIO_enSetPinValue+0x1a6>
     e62:	c8 c0       	rjmp	.+400    	; 0xff4 <MDIO_enSetPinValue+0x20a>
	case PORTA:
		if (HIGH == copy_enValue) {
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	a1 f4       	brne	.+40     	; 0xe92 <MDIO_enSetPinValue+0xa8>
			SET_BIT(REG_PORTA, Local_u8Pin);
     e6a:	ab e3       	ldi	r26, 0x3B	; 59
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <MDIO_enSetPinValue+0x9e>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <MDIO_enSetPinValue+0x9a>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	b3 c0       	rjmp	.+358    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	88 23       	and	r24, r24
     e96:	a9 f4       	brne	.+42     	; 0xec2 <MDIO_enSetPinValue+0xd8>
			CLR_BIT(REG_PORTA, Local_u8Pin);
     e98:	ab e3       	ldi	r26, 0x3B	; 59
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e3       	ldi	r30, 0x3B	; 59
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <MDIO_enSetPinValue+0xcc>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <MDIO_enSetPinValue+0xc8>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	9b c0       	rjmp	.+310    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	98 c0       	rjmp	.+304    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		}
		break;
	case PORTB:
		if (HIGH == copy_enValue) {
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	a1 f4       	brne	.+40     	; 0xef6 <MDIO_enSetPinValue+0x10c>
			SET_BIT(REG_PORTB, Local_u8Pin);
     ece:	a8 e3       	ldi	r26, 0x38	; 56
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e8 e3       	ldi	r30, 0x38	; 56
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <MDIO_enSetPinValue+0x102>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <MDIO_enSetPinValue+0xfe>
     ef0:	84 2b       	or	r24, r20
     ef2:	8c 93       	st	X, r24
     ef4:	81 c0       	rjmp	.+258    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	88 23       	and	r24, r24
     efa:	a9 f4       	brne	.+42     	; 0xf26 <MDIO_enSetPinValue+0x13c>
			CLR_BIT(REG_PORTB, Local_u8Pin);
     efc:	a8 e3       	ldi	r26, 0x38	; 56
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e8 e3       	ldi	r30, 0x38	; 56
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <MDIO_enSetPinValue+0x130>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <MDIO_enSetPinValue+0x12c>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	69 c0       	rjmp	.+210    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	8b 83       	std	Y+3, r24	; 0x03
     f2a:	66 c0       	rjmp	.+204    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		}
		break;
	case PORTC:
		if (HIGH == copy_enValue) {
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	a1 f4       	brne	.+40     	; 0xf5a <MDIO_enSetPinValue+0x170>
			SET_BIT(REG_PORTC, Local_u8Pin);
     f32:	a5 e3       	ldi	r26, 0x35	; 53
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e5 e3       	ldi	r30, 0x35	; 53
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <MDIO_enSetPinValue+0x166>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <MDIO_enSetPinValue+0x162>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	4f c0       	rjmp	.+158    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	88 23       	and	r24, r24
     f5e:	a9 f4       	brne	.+42     	; 0xf8a <MDIO_enSetPinValue+0x1a0>
			CLR_BIT(REG_PORTC, Local_u8Pin);
     f60:	a5 e3       	ldi	r26, 0x35	; 53
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e5 e3       	ldi	r30, 0x35	; 53
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <MDIO_enSetPinValue+0x194>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <MDIO_enSetPinValue+0x190>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	37 c0       	rjmp	.+110    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	34 c0       	rjmp	.+104    	; 0xff8 <MDIO_enSetPinValue+0x20e>
		}
		break;
	case PORTD:
		if (HIGH == copy_enValue) {
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	a1 f4       	brne	.+40     	; 0xfbe <MDIO_enSetPinValue+0x1d4>
			SET_BIT(REG_PORTD, Local_u8Pin);
     f96:	a2 e3       	ldi	r26, 0x32	; 50
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e3       	ldi	r30, 0x32	; 50
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <MDIO_enSetPinValue+0x1ca>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <MDIO_enSetPinValue+0x1c6>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	1d c0       	rjmp	.+58     	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else if (LOW == copy_enValue) {
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	88 23       	and	r24, r24
     fc2:	a9 f4       	brne	.+42     	; 0xfee <MDIO_enSetPinValue+0x204>
			CLR_BIT(REG_PORTD, Local_u8Pin);
     fc4:	a2 e3       	ldi	r26, 0x32	; 50
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e2 e3       	ldi	r30, 0x32	; 50
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <MDIO_enSetPinValue+0x1f8>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <MDIO_enSetPinValue+0x1f4>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <MDIO_enSetPinValue+0x20e>
		} else {
			Local_enState = OUT_OF_RANGE_ERR;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <MDIO_enSetPinValue+0x20e>
		}
		break;
	default:
		Local_enState = OUT_OF_RANGE_ERR;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	8b 83       	std	Y+3, r24	; 0x03
		break;
	} // switch
	return Local_enState;
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ffa:	27 96       	adiw	r28, 0x07	; 7
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <MDIO_enSetPortValue>:

ErrorState_t MDIO_enSetPortValue(Port_t copy_enPort, u8 copy_u8Value) {
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <MDIO_enSetPortValue+0x6>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <MDIO_enSetPortValue+0x8>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	8a 83       	std	Y+2, r24	; 0x02
    101c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    101e:	19 82       	std	Y+1, r1	; 0x01
	if ((0 > copy_u8Value) || (255 < copy_u8Value)) {
		Local_enState = OUT_OF_RANGE_ERR;
	} else {
		switch (copy_enPort) {
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3d 83       	std	Y+5, r19	; 0x05
    1028:	2c 83       	std	Y+4, r18	; 0x04
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	91 05       	cpc	r25, r1
    1032:	d9 f0       	breq	.+54     	; 0x106a <MDIO_enSetPortValue+0x5e>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	23 30       	cpi	r18, 0x03	; 3
    103a:	31 05       	cpc	r19, r1
    103c:	34 f4       	brge	.+12     	; 0x104a <MDIO_enSetPortValue+0x3e>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	61 f0       	breq	.+24     	; 0x1060 <MDIO_enSetPortValue+0x54>
    1048:	1f c0       	rjmp	.+62     	; 0x1088 <MDIO_enSetPortValue+0x7c>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	23 30       	cpi	r18, 0x03	; 3
    1050:	31 05       	cpc	r19, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <MDIO_enSetPortValue+0x68>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	9d 81       	ldd	r25, Y+5	; 0x05
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	91 05       	cpc	r25, r1
    105c:	81 f0       	breq	.+32     	; 0x107e <MDIO_enSetPortValue+0x72>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <MDIO_enSetPortValue+0x7c>
		case PORTA:
			REG_PORTA = copy_u8Value;
    1060:	eb e3       	ldi	r30, 0x3B	; 59
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	80 83       	st	Z, r24
    1068:	11 c0       	rjmp	.+34     	; 0x108c <MDIO_enSetPortValue+0x80>
			break;
		case PORTB:
			REG_PORTB = copy_u8Value;
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	80 83       	st	Z, r24
    1072:	0c c0       	rjmp	.+24     	; 0x108c <MDIO_enSetPortValue+0x80>
			break;
		case PORTC:
			REG_PORTC = copy_u8Value;
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	80 83       	st	Z, r24
    107c:	07 c0       	rjmp	.+14     	; 0x108c <MDIO_enSetPortValue+0x80>
			break;
		case PORTD:
			REG_PORTD = copy_u8Value;
    107e:	e2 e3       	ldi	r30, 0x32	; 50
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	80 83       	st	Z, r24
    1086:	02 c0       	rjmp	.+4      	; 0x108c <MDIO_enSetPortValue+0x80>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
			break;
		} // switch
	} // else
	return Local_enState;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <MDIO_enGetPinValue>:

ErrorState_t MDIO_enGetPinValue(Pin_t copy_enPin, Value_t *ptrPinValue) {
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	28 97       	sbiw	r28, 0x08	; 8
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	8c 83       	std	Y+4, r24	; 0x04
    10b4:	7e 83       	std	Y+6, r23	; 0x06
    10b6:	6d 83       	std	Y+5, r22	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    10b8:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9a e0       	ldi	r25, 0x0A	; 10
    10be:	69 2f       	mov	r22, r25
    10c0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
    10c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin = copy_enPin % 10;
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9a e0       	ldi	r25, 0x0A	; 10
    10ca:	69 2f       	mov	r22, r25
    10cc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
    10d0:	89 2f       	mov	r24, r25
    10d2:	89 83       	std	Y+1, r24	; 0x01
	if (NULL != ptrPinValue) {
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	09 f4       	brne	.+2      	; 0x10de <MDIO_enGetPinValue+0x40>
    10dc:	74 c0       	rjmp	.+232    	; 0x11c6 <MDIO_enGetPinValue+0x128>
		switch (Local_u8Port) {
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	38 87       	std	Y+8, r19	; 0x08
    10e6:	2f 83       	std	Y+7, r18	; 0x07
    10e8:	4f 81       	ldd	r20, Y+7	; 0x07
    10ea:	58 85       	ldd	r21, Y+8	; 0x08
    10ec:	42 30       	cpi	r20, 0x02	; 2
    10ee:	51 05       	cpc	r21, r1
    10f0:	59 f1       	breq	.+86     	; 0x1148 <MDIO_enGetPinValue+0xaa>
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	98 85       	ldd	r25, Y+8	; 0x08
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	34 f4       	brge	.+12     	; 0x1108 <MDIO_enGetPinValue+0x6a>
    10fc:	2f 81       	ldd	r18, Y+7	; 0x07
    10fe:	38 85       	ldd	r19, Y+8	; 0x08
    1100:	21 30       	cpi	r18, 0x01	; 1
    1102:	31 05       	cpc	r19, r1
    1104:	69 f0       	breq	.+26     	; 0x1120 <MDIO_enGetPinValue+0x82>
    1106:	5c c0       	rjmp	.+184    	; 0x11c0 <MDIO_enGetPinValue+0x122>
    1108:	4f 81       	ldd	r20, Y+7	; 0x07
    110a:	58 85       	ldd	r21, Y+8	; 0x08
    110c:	43 30       	cpi	r20, 0x03	; 3
    110e:	51 05       	cpc	r21, r1
    1110:	79 f1       	breq	.+94     	; 0x1170 <MDIO_enGetPinValue+0xd2>
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	98 85       	ldd	r25, Y+8	; 0x08
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <MDIO_enGetPinValue+0x80>
    111c:	3d c0       	rjmp	.+122    	; 0x1198 <MDIO_enGetPinValue+0xfa>
    111e:	50 c0       	rjmp	.+160    	; 0x11c0 <MDIO_enGetPinValue+0x122>
		case PORTA:
			*ptrPinValue = GET_BIT(REG_PINA, Local_u8Pin);
    1120:	e9 e3       	ldi	r30, 0x39	; 57
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <MDIO_enGetPinValue+0x9a>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <MDIO_enGetPinValue+0x96>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	ed 81       	ldd	r30, Y+5	; 0x05
    1142:	fe 81       	ldd	r31, Y+6	; 0x06
    1144:	80 83       	st	Z, r24
    1146:	41 c0       	rjmp	.+130    	; 0x11ca <MDIO_enGetPinValue+0x12c>
			break;
		case PORTB:
			*ptrPinValue = GET_BIT(REG_PINB, Local_u8Pin);
    1148:	e6 e3       	ldi	r30, 0x36	; 54
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	a9 01       	movw	r20, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <MDIO_enGetPinValue+0xc2>
    115c:	55 95       	asr	r21
    115e:	47 95       	ror	r20
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <MDIO_enGetPinValue+0xbe>
    1164:	ca 01       	movw	r24, r20
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	ed 81       	ldd	r30, Y+5	; 0x05
    116a:	fe 81       	ldd	r31, Y+6	; 0x06
    116c:	80 83       	st	Z, r24
    116e:	2d c0       	rjmp	.+90     	; 0x11ca <MDIO_enGetPinValue+0x12c>
			break;
		case PORTC:
			*ptrPinValue = GET_BIT(REG_PINC, Local_u8Pin);
    1170:	e3 e3       	ldi	r30, 0x33	; 51
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <MDIO_enGetPinValue+0xea>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <MDIO_enGetPinValue+0xe6>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	ed 81       	ldd	r30, Y+5	; 0x05
    1192:	fe 81       	ldd	r31, Y+6	; 0x06
    1194:	80 83       	st	Z, r24
    1196:	19 c0       	rjmp	.+50     	; 0x11ca <MDIO_enGetPinValue+0x12c>
			break;
		case PORTD:
			*ptrPinValue = GET_BIT(REG_PIND, Local_u8Pin);
    1198:	e0 e3       	ldi	r30, 0x30	; 48
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <MDIO_enGetPinValue+0x112>
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <MDIO_enGetPinValue+0x10e>
    11b4:	ca 01       	movw	r24, r20
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	ed 81       	ldd	r30, Y+5	; 0x05
    11ba:	fe 81       	ldd	r31, Y+6	; 0x06
    11bc:	80 83       	st	Z, r24
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <MDIO_enGetPinValue+0x12c>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <MDIO_enGetPinValue+0x12c>
			break;
		} // switch
	} // if
	else {
		Local_enState = NULL_POINTER_ERR;
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enState;
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11cc:	28 96       	adiw	r28, 0x08	; 8
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <MDIO_enGetPortValue>:

ErrorState_t MDIO_enGetPortValue(Port_t copy_enPort, u8 *ptrPortValue) {
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <MDIO_enGetPortValue+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <MDIO_enGetPortValue+0x8>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <MDIO_enGetPortValue+0xa>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	7c 83       	std	Y+4, r23	; 0x04
    11f0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState_t Local_enState = SUCCESS;
    11f2:	19 82       	std	Y+1, r1	; 0x01
	if (NULL != ptrPortValue) {
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f4       	brne	.+2      	; 0x11fe <MDIO_enGetPortValue+0x20>
    11fc:	3f c0       	rjmp	.+126    	; 0x127c <MDIO_enGetPortValue+0x9e>
		switch (copy_enPort) {
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3e 83       	std	Y+6, r19	; 0x06
    1206:	2d 83       	std	Y+5, r18	; 0x05
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	82 30       	cpi	r24, 0x02	; 2
    120e:	91 05       	cpc	r25, r1
    1210:	e9 f0       	breq	.+58     	; 0x124c <MDIO_enGetPortValue+0x6e>
    1212:	2d 81       	ldd	r18, Y+5	; 0x05
    1214:	3e 81       	ldd	r19, Y+6	; 0x06
    1216:	23 30       	cpi	r18, 0x03	; 3
    1218:	31 05       	cpc	r19, r1
    121a:	34 f4       	brge	.+12     	; 0x1228 <MDIO_enGetPortValue+0x4a>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	61 f0       	breq	.+24     	; 0x123e <MDIO_enGetPortValue+0x60>
    1226:	27 c0       	rjmp	.+78     	; 0x1276 <MDIO_enGetPortValue+0x98>
    1228:	2d 81       	ldd	r18, Y+5	; 0x05
    122a:	3e 81       	ldd	r19, Y+6	; 0x06
    122c:	23 30       	cpi	r18, 0x03	; 3
    122e:	31 05       	cpc	r19, r1
    1230:	a1 f0       	breq	.+40     	; 0x125a <MDIO_enGetPortValue+0x7c>
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	91 05       	cpc	r25, r1
    123a:	b1 f0       	breq	.+44     	; 0x1268 <MDIO_enGetPortValue+0x8a>
    123c:	1c c0       	rjmp	.+56     	; 0x1276 <MDIO_enGetPortValue+0x98>
		case PORTA:
			*ptrPortValue = REG_PINA;
    123e:	e9 e3       	ldi	r30, 0x39	; 57
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	eb 81       	ldd	r30, Y+3	; 0x03
    1246:	fc 81       	ldd	r31, Y+4	; 0x04
    1248:	80 83       	st	Z, r24
    124a:	1a c0       	rjmp	.+52     	; 0x1280 <MDIO_enGetPortValue+0xa2>
			break;
		case PORTB:
			*ptrPortValue = REG_PINB;
    124c:	e6 e3       	ldi	r30, 0x36	; 54
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	eb 81       	ldd	r30, Y+3	; 0x03
    1254:	fc 81       	ldd	r31, Y+4	; 0x04
    1256:	80 83       	st	Z, r24
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <MDIO_enGetPortValue+0xa2>
			break;
		case PORTC:
			*ptrPortValue = REG_PINC;
    125a:	e3 e3       	ldi	r30, 0x33	; 51
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	eb 81       	ldd	r30, Y+3	; 0x03
    1262:	fc 81       	ldd	r31, Y+4	; 0x04
    1264:	80 83       	st	Z, r24
    1266:	0c c0       	rjmp	.+24     	; 0x1280 <MDIO_enGetPortValue+0xa2>
			break;
		case PORTD:
			*ptrPortValue = REG_PIND;
    1268:	e0 e3       	ldi	r30, 0x30	; 48
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	eb 81       	ldd	r30, Y+3	; 0x03
    1270:	fc 81       	ldd	r31, Y+4	; 0x04
    1272:	80 83       	st	Z, r24
    1274:	05 c0       	rjmp	.+10     	; 0x1280 <MDIO_enGetPortValue+0xa2>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <MDIO_enGetPortValue+0xa2>
			break;
		} // switch
	} // if
	else {
		Local_enState = NULL_POINTER_ERR;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    1280:	89 81       	ldd	r24, Y+1	; 0x01
}
    1282:	26 96       	adiw	r28, 0x06	; 6
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <MDIO_enTogglePinValue>:

ErrorState_t MDIO_enTogglePinValue(Pin_t copy_enPin) {
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <MDIO_enTogglePinValue+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <MDIO_enTogglePinValue+0x8>
    129c:	00 d0       	rcall	.+0      	; 0x129e <MDIO_enTogglePinValue+0xa>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8c 83       	std	Y+4, r24	; 0x04
	ErrorState_t Local_enState = SUCCESS;
    12a4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Port = copy_enPin / 10;
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9a e0       	ldi	r25, 0x0A	; 10
    12aa:	69 2f       	mov	r22, r25
    12ac:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
    12b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Pin = copy_enPin % 10;
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9a e0       	ldi	r25, 0x0A	; 10
    12b6:	69 2f       	mov	r22, r25
    12b8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodqi4>
    12bc:	89 2f       	mov	r24, r25
    12be:	89 83       	std	Y+1, r24	; 0x01
	switch (Local_u8Port) {
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3e 83       	std	Y+6, r19	; 0x06
    12c8:	2d 83       	std	Y+5, r18	; 0x05
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	91 05       	cpc	r25, r1
    12d2:	51 f1       	breq	.+84     	; 0x1328 <MDIO_enTogglePinValue+0x94>
    12d4:	2d 81       	ldd	r18, Y+5	; 0x05
    12d6:	3e 81       	ldd	r19, Y+6	; 0x06
    12d8:	23 30       	cpi	r18, 0x03	; 3
    12da:	31 05       	cpc	r19, r1
    12dc:	34 f4       	brge	.+12     	; 0x12ea <MDIO_enTogglePinValue+0x56>
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	61 f0       	breq	.+24     	; 0x1300 <MDIO_enTogglePinValue+0x6c>
    12e8:	5b c0       	rjmp	.+182    	; 0x13a0 <MDIO_enTogglePinValue+0x10c>
    12ea:	2d 81       	ldd	r18, Y+5	; 0x05
    12ec:	3e 81       	ldd	r19, Y+6	; 0x06
    12ee:	23 30       	cpi	r18, 0x03	; 3
    12f0:	31 05       	cpc	r19, r1
    12f2:	71 f1       	breq	.+92     	; 0x1350 <MDIO_enTogglePinValue+0xbc>
    12f4:	8d 81       	ldd	r24, Y+5	; 0x05
    12f6:	9e 81       	ldd	r25, Y+6	; 0x06
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	91 05       	cpc	r25, r1
    12fc:	e9 f1       	breq	.+122    	; 0x1378 <MDIO_enTogglePinValue+0xe4>
    12fe:	50 c0       	rjmp	.+160    	; 0x13a0 <MDIO_enTogglePinValue+0x10c>
	case PORTA:
		TOGG_BIT(REG_PORTA, Local_u8Pin);
    1300:	ab e3       	ldi	r26, 0x3B	; 59
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <MDIO_enTogglePinValue+0x8a>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <MDIO_enTogglePinValue+0x86>
    1322:	84 27       	eor	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	3e c0       	rjmp	.+124    	; 0x13a4 <MDIO_enTogglePinValue+0x110>
		break;
	case PORTB:
		TOGG_BIT(REG_PORTB, Local_u8Pin);
    1328:	a8 e3       	ldi	r26, 0x38	; 56
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e8 e3       	ldi	r30, 0x38	; 56
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <MDIO_enTogglePinValue+0xb2>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <MDIO_enTogglePinValue+0xae>
    134a:	84 27       	eor	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	2a c0       	rjmp	.+84     	; 0x13a4 <MDIO_enTogglePinValue+0x110>
		break;
	case PORTC:
		TOGG_BIT(REG_PORTC, Local_u8Pin);
    1350:	a5 e3       	ldi	r26, 0x35	; 53
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <MDIO_enTogglePinValue+0xda>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <MDIO_enTogglePinValue+0xd6>
    1372:	84 27       	eor	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	16 c0       	rjmp	.+44     	; 0x13a4 <MDIO_enTogglePinValue+0x110>
		break;
	case PORTD:
		TOGG_BIT(REG_PORTD, Local_u8Pin);
    1378:	a2 e3       	ldi	r26, 0x32	; 50
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <MDIO_enTogglePinValue+0x102>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <MDIO_enTogglePinValue+0xfe>
    139a:	84 27       	eor	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <MDIO_enTogglePinValue+0x110>
		break;
	default:
		Local_enState = OUT_OF_RANGE_ERR;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	8b 83       	std	Y+3, r24	; 0x03
		break;
	} // switch
	return Local_enState;
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13a6:	26 96       	adiw	r28, 0x06	; 6
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <MDIO_enTogglePortValue>:

ErrorState_t MDIO_enTogglePortValue(Port_t copy_enPort) {
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <MDIO_enTogglePortValue+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <MDIO_enTogglePortValue+0x8>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    13c6:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_enPort) {
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3c 83       	std	Y+4, r19	; 0x04
    13d0:	2b 83       	std	Y+3, r18	; 0x03
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	91 05       	cpc	r25, r1
    13da:	f1 f0       	breq	.+60     	; 0x1418 <MDIO_enTogglePortValue+0x60>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	23 30       	cpi	r18, 0x03	; 3
    13e2:	31 05       	cpc	r19, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <MDIO_enTogglePortValue+0x3a>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	61 f0       	breq	.+24     	; 0x1408 <MDIO_enTogglePortValue+0x50>
    13f0:	2b c0       	rjmp	.+86     	; 0x1448 <MDIO_enTogglePortValue+0x90>
    13f2:	2b 81       	ldd	r18, Y+3	; 0x03
    13f4:	3c 81       	ldd	r19, Y+4	; 0x04
    13f6:	23 30       	cpi	r18, 0x03	; 3
    13f8:	31 05       	cpc	r19, r1
    13fa:	b1 f0       	breq	.+44     	; 0x1428 <MDIO_enTogglePortValue+0x70>
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	91 05       	cpc	r25, r1
    1404:	c9 f0       	breq	.+50     	; 0x1438 <MDIO_enTogglePortValue+0x80>
    1406:	20 c0       	rjmp	.+64     	; 0x1448 <MDIO_enTogglePortValue+0x90>
	case PORTA:
		TOGG_REG(REG_PORTA);
    1408:	ab e3       	ldi	r26, 0x3B	; 59
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e3       	ldi	r30, 0x3B	; 59
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 95       	com	r24
    1414:	8c 93       	st	X, r24
    1416:	1a c0       	rjmp	.+52     	; 0x144c <MDIO_enTogglePortValue+0x94>
		break;
	case PORTB:
		TOGG_REG(REG_PORTB);
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 95       	com	r24
    1424:	8c 93       	st	X, r24
    1426:	12 c0       	rjmp	.+36     	; 0x144c <MDIO_enTogglePortValue+0x94>
		break;
	case PORTC:
		TOGG_REG(REG_PORTC);
    1428:	a5 e3       	ldi	r26, 0x35	; 53
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 95       	com	r24
    1434:	8c 93       	st	X, r24
    1436:	0a c0       	rjmp	.+20     	; 0x144c <MDIO_enTogglePortValue+0x94>
		break;
	case PORTD:
		TOGG_REG(REG_PORTD);
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 95       	com	r24
    1444:	8c 93       	st	X, r24
    1446:	02 c0       	rjmp	.+4      	; 0x144c <MDIO_enTogglePortValue+0x94>
		break;
	default:
		Local_enState = OUT_OF_RANGE_ERR;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
		break;
	} // switch
	return Local_enState;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <HLED_enInit>:
#include <MDIO_interface.h>
#include <HLED_private.h>
#include <HLED_config.h>
#include <HLED_interface.h>

ErrorState_t HLED_enInit(Led_t *PtrLed) {
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <HLED_enInit+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <HLED_enInit+0x8>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    146e:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	41 f1       	breq	.+80     	; 0x14c8 <HLED_enInit+0x6c>
		MDIO_enSetPinDirection(PtrLed->LED_Pin, OUTPUT);
    1478:	ea 81       	ldd	r30, Y+2	; 0x02
    147a:	fb 81       	ldd	r31, Y+3	; 0x03
    147c:	80 81       	ld	r24, Z
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
		switch (PtrLed->LED_Connection) {
    1484:	ea 81       	ldd	r30, Y+2	; 0x02
    1486:	fb 81       	ldd	r31, Y+3	; 0x03
    1488:	81 81       	ldd	r24, Z+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3d 83       	std	Y+5, r19	; 0x05
    1490:	2c 83       	std	Y+4, r18	; 0x04
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	31 f0       	breq	.+12     	; 0x14a6 <HLED_enInit+0x4a>
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	21 30       	cpi	r18, 0x01	; 1
    14a0:	31 05       	cpc	r19, r1
    14a2:	41 f0       	breq	.+16     	; 0x14b4 <HLED_enInit+0x58>
    14a4:	0e c0       	rjmp	.+28     	; 0x14c2 <HLED_enInit+0x66>
		case SOURCE:
			MDIO_enSetPinValue(PtrLed->LED_Pin, LOW);
    14a6:	ea 81       	ldd	r30, Y+2	; 0x02
    14a8:	fb 81       	ldd	r31, Y+3	; 0x03
    14aa:	80 81       	ld	r24, Z
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    14b2:	0c c0       	rjmp	.+24     	; 0x14cc <HLED_enInit+0x70>
			break;
		case SINK:
			MDIO_enSetPinValue(PtrLed->LED_Pin, HIGH);
    14b4:	ea 81       	ldd	r30, Y+2	; 0x02
    14b6:	fb 81       	ldd	r31, Y+3	; 0x03
    14b8:	80 81       	ld	r24, Z
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <HLED_enInit+0x70>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <HLED_enInit+0x70>
			break;
		}
	} // if --> PtrLed != NULL
	else {
		Local_enState = NULL_POINTER_ERR;
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <HLED_enEnable>:

ErrorState_t HLED_enEnable(Led_t *PtrLed) {
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <HLED_enEnable+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <HLED_enEnable+0x8>
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	9b 83       	std	Y+3, r25	; 0x03
    14ee:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    14f0:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	11 f1       	breq	.+68     	; 0x153e <HLED_enEnable+0x60>
		switch (PtrLed->LED_Connection) {
    14fa:	ea 81       	ldd	r30, Y+2	; 0x02
    14fc:	fb 81       	ldd	r31, Y+3	; 0x03
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3d 83       	std	Y+5, r19	; 0x05
    1506:	2c 83       	std	Y+4, r18	; 0x04
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	31 f0       	breq	.+12     	; 0x151c <HLED_enEnable+0x3e>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	21 30       	cpi	r18, 0x01	; 1
    1516:	31 05       	cpc	r19, r1
    1518:	41 f0       	breq	.+16     	; 0x152a <HLED_enEnable+0x4c>
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <HLED_enEnable+0x5a>
		case SOURCE:
			MDIO_enSetPinValue(PtrLed->LED_Pin, HIGH);
    151c:	ea 81       	ldd	r30, Y+2	; 0x02
    151e:	fb 81       	ldd	r31, Y+3	; 0x03
    1520:	80 81       	ld	r24, Z
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    1528:	0c c0       	rjmp	.+24     	; 0x1542 <HLED_enEnable+0x64>
			break;
		case SINK:
			MDIO_enSetPinValue(PtrLed->LED_Pin, LOW);
    152a:	ea 81       	ldd	r30, Y+2	; 0x02
    152c:	fb 81       	ldd	r31, Y+3	; 0x03
    152e:	80 81       	ld	r24, Z
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <HLED_enEnable+0x64>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <HLED_enEnable+0x64>
			break;
		}
	} // if --> PtrLed != NULL
	else {
		Local_enState = NULL_POINTER_ERR;
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <HLED_enDisable>:

ErrorState_t HLED_enDisable(Led_t *PtrLed) {
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <HLED_enDisable+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <HLED_enDisable+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	9b 83       	std	Y+3, r25	; 0x03
    1564:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1566:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	11 f1       	breq	.+68     	; 0x15b4 <HLED_enDisable+0x60>
		switch (PtrLed->LED_Connection) {
    1570:	ea 81       	ldd	r30, Y+2	; 0x02
    1572:	fb 81       	ldd	r31, Y+3	; 0x03
    1574:	81 81       	ldd	r24, Z+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3d 83       	std	Y+5, r19	; 0x05
    157c:	2c 83       	std	Y+4, r18	; 0x04
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	31 f0       	breq	.+12     	; 0x1592 <HLED_enDisable+0x3e>
    1586:	2c 81       	ldd	r18, Y+4	; 0x04
    1588:	3d 81       	ldd	r19, Y+5	; 0x05
    158a:	21 30       	cpi	r18, 0x01	; 1
    158c:	31 05       	cpc	r19, r1
    158e:	41 f0       	breq	.+16     	; 0x15a0 <HLED_enDisable+0x4c>
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <HLED_enDisable+0x5a>
		case SOURCE:
			MDIO_enSetPinValue(PtrLed->LED_Pin, LOW);
    1592:	ea 81       	ldd	r30, Y+2	; 0x02
    1594:	fb 81       	ldd	r31, Y+3	; 0x03
    1596:	80 81       	ld	r24, Z
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    159e:	0c c0       	rjmp	.+24     	; 0x15b8 <HLED_enDisable+0x64>
			break;
		case SINK:
			MDIO_enSetPinValue(PtrLed->LED_Pin, HIGH);
    15a0:	ea 81       	ldd	r30, Y+2	; 0x02
    15a2:	fb 81       	ldd	r31, Y+3	; 0x03
    15a4:	80 81       	ld	r24, Z
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    15ac:	05 c0       	rjmp	.+10     	; 0x15b8 <HLED_enDisable+0x64>
			break;
		default:
			Local_enState = OUT_OF_RANGE_ERR;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <HLED_enDisable+0x64>
			break;
		}
	} // if --> PtrLed != NULL
	else {
		Local_enState = NULL_POINTER_ERR;
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enState;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <HLED_enToggle>:

ErrorState_t HLED_enToggle(Led_t *PtrLed) {
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <HLED_enToggle+0x6>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <HLED_enToggle+0x8>
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	9b 83       	std	Y+3, r25	; 0x03
    15d8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    15da:	19 82       	std	Y+1, r1	; 0x01
	if (PtrLed != NULL) {
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	41 f0       	breq	.+16     	; 0x15f4 <HLED_enToggle+0x2a>
		MDIO_enTogglePinValue(PtrLed->LED_Pin);
    15e4:	ea 81       	ldd	r30, Y+2	; 0x02
    15e6:	fb 81       	ldd	r31, Y+3	; 0x03
    15e8:	80 81       	ld	r24, Z
    15ea:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_enTogglePinValue>
		return Local_enState;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	8c 83       	std	Y+4, r24	; 0x04
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <HLED_enToggle+0x32>
	} else {
		Local_enState = NULL_POINTER_ERR;
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enState;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	8c 83       	std	Y+4, r24	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <HLCD_voidNLatch>:
#include <MDIO_interface.h>
#include <HLCD_private.h>
#include <HLCD_config.h>
#include <HLCD_interface.h>

static void HLCD_voidNLatch(u8 copy_u8Byte) {
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	a3 97       	sbiw	r28, 0x23	; 35
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	8b a3       	std	Y+35, r24	; 0x23
#if((HLCD_DATA == HLCD_DATA_PORT) && (HLCD_MODE!=HLCD_4BIT_MODE))
	MDIO_enSetPortValue(HLCD_D_PORT, HLCD_DATA_PORT);
#elif(HLCD_DATA == HLCD_DATA_PINS)
	u8 Local_u8Counter = 0;
    1622:	1e 8e       	std	Y+30, r1	; 0x1e
			Local_u8Counter++) {
		MDIO_enSetPinValue(Local_u8LCD_Pins_arr[Local_u8Counter],
				GET_BIT(copy_u8Byte, Local_u8Counter));
	} // for
#elif(HLCD_MODE==HLCD_4BIT_MODE)
	u8 Local_u8Condition = 4;
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 Local_u8LCD_Pins_arr[] = { HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN,
	HLCD_D7_PIN };
    1628:	81 e2       	ldi	r24, 0x21	; 33
    162a:	8f 8f       	std	Y+31, r24	; 0x1f
    162c:	82 e2       	ldi	r24, 0x22	; 34
    162e:	88 a3       	std	Y+32, r24	; 0x20
    1630:	83 e2       	ldi	r24, 0x23	; 35
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	84 e2       	ldi	r24, 0x24	; 36
    1636:	8a a3       	std	Y+34, r24	; 0x22
	/** Send Upper 4 Bits **/
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
    1638:	1e 8e       	std	Y+30, r1	; 0x1e
    163a:	20 c0       	rjmp	.+64     	; 0x167c <HLCD_voidNLatch+0x70>
			Local_u8Counter++) {
		MDIO_enSetPinValue(Local_u8LCD_Pins_arr[Local_u8Counter],
    163c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	ce 01       	movw	r24, r28
    1644:	4f 96       	adiw	r24, 0x1f	; 31
    1646:	fc 01       	movw	r30, r24
    1648:	e2 0f       	add	r30, r18
    164a:	f3 1f       	adc	r31, r19
    164c:	40 81       	ld	r20, Z
    164e:	8b a1       	ldd	r24, Y+35	; 0x23
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	04 96       	adiw	r24, 0x04	; 4
    165c:	b9 01       	movw	r22, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <HLCD_voidNLatch+0x58>
    1660:	75 95       	asr	r23
    1662:	67 95       	ror	r22
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <HLCD_voidNLatch+0x54>
    1668:	cb 01       	movw	r24, r22
    166a:	98 2f       	mov	r25, r24
    166c:	91 70       	andi	r25, 0x01	; 1
    166e:	84 2f       	mov	r24, r20
    1670:	69 2f       	mov	r22, r25
    1672:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	u8 Local_u8Condition = 4;
	u8 Local_u8LCD_Pins_arr[] = { HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN,
	HLCD_D7_PIN };
	/** Send Upper 4 Bits **/
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
			Local_u8Counter++) {
    1676:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	8e 8f       	std	Y+30, r24	; 0x1e
#elif(HLCD_MODE==HLCD_4BIT_MODE)
	u8 Local_u8Condition = 4;
	u8 Local_u8LCD_Pins_arr[] = { HLCD_D4_PIN, HLCD_D5_PIN, HLCD_D6_PIN,
	HLCD_D7_PIN };
	/** Send Upper 4 Bits **/
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
    167c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    167e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1680:	98 17       	cp	r25, r24
    1682:	e0 f2       	brcs	.-72     	; 0x163c <HLCD_voidNLatch+0x30>
			Local_u8Counter++) {
		MDIO_enSetPinValue(Local_u8LCD_Pins_arr[Local_u8Counter],
				GET_BIT(copy_u8Byte, Local_u8Counter + 4));
	} // for
	/** Enable Pulse **/
	MDIO_enSetPinValue(HLCD_EN_PIN, HIGH);
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e4       	ldi	r27, 0x40	; 64
    1694:	89 8f       	std	Y+25, r24	; 0x19
    1696:	9a 8f       	std	Y+26, r25	; 0x1a
    1698:	ab 8f       	std	Y+27, r26	; 0x1b
    169a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169c:	69 8d       	ldd	r22, Y+25	; 0x19
    169e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a e7       	ldi	r20, 0x7A	; 122
    16aa:	55 e4       	ldi	r21, 0x45	; 69
    16ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	8d 8b       	std	Y+21, r24	; 0x15
    16b6:	9e 8b       	std	Y+22, r25	; 0x16
    16b8:	af 8b       	std	Y+23, r26	; 0x17
    16ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16bc:	6d 89       	ldd	r22, Y+21	; 0x15
    16be:	7e 89       	ldd	r23, Y+22	; 0x16
    16c0:	8f 89       	ldd	r24, Y+23	; 0x17
    16c2:	98 8d       	ldd	r25, Y+24	; 0x18
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	2c f4       	brge	.+10     	; 0x16de <HLCD_voidNLatch+0xd2>
		__ticks = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 8b       	std	Y+20, r25	; 0x14
    16da:	8b 8b       	std	Y+19, r24	; 0x13
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <HLCD_voidNLatch+0x150>
	else if (__tmp > 65535)
    16de:	6d 89       	ldd	r22, Y+21	; 0x15
    16e0:	7e 89       	ldd	r23, Y+22	; 0x16
    16e2:	8f 89       	ldd	r24, Y+23	; 0x17
    16e4:	98 8d       	ldd	r25, Y+24	; 0x18
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	4c f5       	brge	.+82     	; 0x1748 <HLCD_voidNLatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	69 8d       	ldd	r22, Y+25	; 0x19
    16f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9c 8b       	std	Y+20, r25	; 0x14
    171c:	8b 8b       	std	Y+19, r24	; 0x13
    171e:	0f c0       	rjmp	.+30     	; 0x173e <HLCD_voidNLatch+0x132>
    1720:	80 e9       	ldi	r24, 0x90	; 144
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	9a 8b       	std	Y+18, r25	; 0x12
    1726:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1728:	89 89       	ldd	r24, Y+17	; 0x11
    172a:	9a 89       	ldd	r25, Y+18	; 0x12
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <HLCD_voidNLatch+0x120>
    1730:	9a 8b       	std	Y+18, r25	; 0x12
    1732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	8b 89       	ldd	r24, Y+19	; 0x13
    1736:	9c 89       	ldd	r25, Y+20	; 0x14
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	8b 89       	ldd	r24, Y+19	; 0x13
    1740:	9c 89       	ldd	r25, Y+20	; 0x14
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f7       	brne	.-38     	; 0x1720 <HLCD_voidNLatch+0x114>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <HLCD_voidNLatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	6d 89       	ldd	r22, Y+21	; 0x15
    174a:	7e 89       	ldd	r23, Y+22	; 0x16
    174c:	8f 89       	ldd	r24, Y+23	; 0x17
    174e:	98 8d       	ldd	r25, Y+24	; 0x18
    1750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9c 8b       	std	Y+20, r25	; 0x14
    175a:	8b 8b       	std	Y+19, r24	; 0x13
    175c:	8b 89       	ldd	r24, Y+19	; 0x13
    175e:	9c 89       	ldd	r25, Y+20	; 0x14
    1760:	98 8b       	std	Y+16, r25	; 0x10
    1762:	8f 87       	std	Y+15, r24	; 0x0f
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	98 89       	ldd	r25, Y+16	; 0x10
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <HLCD_voidNLatch+0x15c>
    176c:	98 8b       	std	Y+16, r25	; 0x10
    176e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_enSetPinValue(HLCD_EN_PIN, LOW);
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/** Send Lower 4 Bits **/
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
    1778:	1e 8e       	std	Y+30, r1	; 0x1e
    177a:	1f c0       	rjmp	.+62     	; 0x17ba <HLCD_voidNLatch+0x1ae>
			Local_u8Counter++) {
		MDIO_enSetPinValue(Local_u8LCD_Pins_arr[Local_u8Counter],
    177c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	ce 01       	movw	r24, r28
    1784:	4f 96       	adiw	r24, 0x1f	; 31
    1786:	fc 01       	movw	r30, r24
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	40 81       	ld	r20, Z
    178e:	8b a1       	ldd	r24, Y+35	; 0x23
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	b9 01       	movw	r22, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <HLCD_voidNLatch+0x196>
    179e:	75 95       	asr	r23
    17a0:	67 95       	ror	r22
    17a2:	8a 95       	dec	r24
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <HLCD_voidNLatch+0x192>
    17a6:	cb 01       	movw	r24, r22
    17a8:	98 2f       	mov	r25, r24
    17aa:	91 70       	andi	r25, 0x01	; 1
    17ac:	84 2f       	mov	r24, r20
    17ae:	69 2f       	mov	r22, r25
    17b0:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HLCD_EN_PIN, HIGH);
	_delay_ms(2);
	MDIO_enSetPinValue(HLCD_EN_PIN, LOW);
	/** Send Lower 4 Bits **/
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
			Local_u8Counter++) {
    17b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	8e 8f       	std	Y+30, r24	; 0x1e
	/** Enable Pulse **/
	MDIO_enSetPinValue(HLCD_EN_PIN, HIGH);
	_delay_ms(2);
	MDIO_enSetPinValue(HLCD_EN_PIN, LOW);
	/** Send Lower 4 Bits **/
	for (Local_u8Counter = 0; Local_u8Counter < Local_u8Condition;
    17ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17be:	98 17       	cp	r25, r24
    17c0:	e8 f2       	brcs	.-70     	; 0x177c <HLCD_voidNLatch+0x170>
				GET_BIT(copy_u8Byte, Local_u8Counter));
	} // for
#endif
#endif
	/** Enable Pulse **/
	MDIO_enSetPinValue(HLCD_EN_PIN, HIGH);
    17c2:	80 e2       	ldi	r24, 0x20	; 32
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e4       	ldi	r27, 0x40	; 64
    17d2:	8b 87       	std	Y+11, r24	; 0x0b
    17d4:	9c 87       	std	Y+12, r25	; 0x0c
    17d6:	ad 87       	std	Y+13, r26	; 0x0d
    17d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	55 e4       	ldi	r21, 0x45	; 69
    17ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8f 83       	std	Y+7, r24	; 0x07
    17f4:	98 87       	std	Y+8, r25	; 0x08
    17f6:	a9 87       	std	Y+9, r26	; 0x09
    17f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fa:	6f 81       	ldd	r22, Y+7	; 0x07
    17fc:	78 85       	ldd	r23, Y+8	; 0x08
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <HLCD_voidNLatch+0x210>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	3f c0       	rjmp	.+126    	; 0x189a <HLCD_voidNLatch+0x28e>
	else if (__tmp > 65535)
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <HLCD_voidNLatch+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	6b 85       	ldd	r22, Y+11	; 0x0b
    1836:	7c 85       	ldd	r23, Y+12	; 0x0c
    1838:	8d 85       	ldd	r24, Y+13	; 0x0d
    183a:	9e 85       	ldd	r25, Y+14	; 0x0e
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	0f c0       	rjmp	.+30     	; 0x187c <HLCD_voidNLatch+0x270>
    185e:	80 e9       	ldi	r24, 0x90	; 144
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <HLCD_voidNLatch+0x25e>
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <HLCD_voidNLatch+0x252>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <HLCD_voidNLatch+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <HLCD_voidNLatch+0x29a>
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
	// It should be 230ns
	// Increased it to not make delay after each Send Command
	_delay_ms(2);
	MDIO_enSetPinValue(HLCD_EN_PIN, LOW);
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
}
    18b6:	a3 96       	adiw	r28, 0x23	; 35
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <HLCD_enInit>:

ErrorState_t HLCD_enInit(void) {
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	6d 97       	sbiw	r28, 0x1d	; 29
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
	ErrorState_t Local_enState = SUCCESS;
    18dc:	1d 8e       	std	Y+29, r1	; 0x1d
	/** Set Pins Direction **/
	MDIO_enSetPinDirection(HLCD_RS_PIN, OUTPUT);
    18de:	8e e1       	ldi	r24, 0x1E	; 30
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_RW_PIN, OUTPUT);
    18e6:	8f e1       	ldi	r24, 0x1F	; 31
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_EN_PIN, OUTPUT);
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D0_PIN, OUTPUT);
	MDIO_enSetPinDirection(HLCD_D1_PIN, OUTPUT);
	MDIO_enSetPinDirection(HLCD_D2_PIN, OUTPUT);
	MDIO_enSetPinDirection(HLCD_D3_PIN, OUTPUT);
#endif
	MDIO_enSetPinDirection(HLCD_D4_PIN, OUTPUT);
    18f6:	81 e2       	ldi	r24, 0x21	; 33
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D5_PIN, OUTPUT);
    18fe:	82 e2       	ldi	r24, 0x22	; 34
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D6_PIN, OUTPUT);
    1906:	83 e2       	ldi	r24, 0x23	; 35
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HLCD_D7_PIN, OUTPUT);
    190e:	84 e2       	ldi	r24, 0x24	; 36
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	ac e0       	ldi	r26, 0x0C	; 12
    191c:	b2 e4       	ldi	r27, 0x42	; 66
    191e:	89 8f       	std	Y+25, r24	; 0x19
    1920:	9a 8f       	std	Y+26, r25	; 0x1a
    1922:	ab 8f       	std	Y+27, r26	; 0x1b
    1924:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1926:	69 8d       	ldd	r22, Y+25	; 0x19
    1928:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    192c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a e7       	ldi	r20, 0x7A	; 122
    1934:	55 e4       	ldi	r21, 0x45	; 69
    1936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8d 8b       	std	Y+21, r24	; 0x15
    1940:	9e 8b       	std	Y+22, r25	; 0x16
    1942:	af 8b       	std	Y+23, r26	; 0x17
    1944:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1946:	6d 89       	ldd	r22, Y+21	; 0x15
    1948:	7e 89       	ldd	r23, Y+22	; 0x16
    194a:	8f 89       	ldd	r24, Y+23	; 0x17
    194c:	98 8d       	ldd	r25, Y+24	; 0x18
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <HLCD_enInit+0xa0>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9c 8b       	std	Y+20, r25	; 0x14
    1964:	8b 8b       	std	Y+19, r24	; 0x13
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <HLCD_enInit+0x11e>
	else if (__tmp > 65535)
    1968:	6d 89       	ldd	r22, Y+21	; 0x15
    196a:	7e 89       	ldd	r23, Y+22	; 0x16
    196c:	8f 89       	ldd	r24, Y+23	; 0x17
    196e:	98 8d       	ldd	r25, Y+24	; 0x18
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	4c f5       	brge	.+82     	; 0x19d2 <HLCD_enInit+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	69 8d       	ldd	r22, Y+25	; 0x19
    1982:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1984:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1986:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <HLCD_enInit+0x100>
    19aa:	80 e9       	ldi	r24, 0x90	; 144
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	9a 8b       	std	Y+18, r25	; 0x12
    19b0:	89 8b       	std	Y+17, r24	; 0x11
    19b2:	89 89       	ldd	r24, Y+17	; 0x11
    19b4:	9a 89       	ldd	r25, Y+18	; 0x12
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <HLCD_enInit+0xee>
    19ba:	9a 8b       	std	Y+18, r25	; 0x12
    19bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	8b 89       	ldd	r24, Y+19	; 0x13
    19c0:	9c 89       	ldd	r25, Y+20	; 0x14
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <HLCD_enInit+0xe2>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <HLCD_enInit+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9c 8b       	std	Y+20, r25	; 0x14
    19e4:	8b 8b       	std	Y+19, r24	; 0x13
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	98 8b       	std	Y+16, r25	; 0x10
    19ec:	8f 87       	std	Y+15, r24	; 0x0f
    19ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f0:	98 89       	ldd	r25, Y+16	; 0x10
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <HLCD_enInit+0x12a>
    19f6:	98 8b       	std	Y+16, r25	; 0x10
    19f8:	8f 87       	std	Y+15, r24	; 0x0f
	/**
	 * Note: We Send this Pattern to Distinguish between 4-Bit and 8-Bit Mode
	 */

#if(HLCD_DATA!=HLCD_DATA_PORT)
	MDIO_enSetPinValue(HLCD_D4_PIN, 0);
    19fa:	81 e2       	ldi	r24, 0x21	; 33
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HLCD_D5_PIN, 1);
    1a02:	82 e2       	ldi	r24, 0x22	; 34
    1a04:	61 e0       	ldi	r22, 0x01	; 1
    1a06:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HLCD_D6_PIN, 0);
    1a0a:	83 e2       	ldi	r24, 0x23	; 35
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HLCD_D7_PIN, 0);
    1a12:	84 e2       	ldi	r24, 0x24	; 36
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
#endif
	/// Step 2 --> Enable Pulse
	MDIO_enSetPinValue(HLCD_EN_PIN, HIGH);
    1a1a:	80 e2       	ldi	r24, 0x20	; 32
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e4       	ldi	r27, 0x40	; 64
    1a2a:	8b 87       	std	Y+11, r24	; 0x0b
    1a2c:	9c 87       	std	Y+12, r25	; 0x0c
    1a2e:	ad 87       	std	Y+13, r26	; 0x0d
    1a30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a e7       	ldi	r20, 0x7A	; 122
    1a40:	55 e4       	ldi	r21, 0x45	; 69
    1a42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8f 83       	std	Y+7, r24	; 0x07
    1a4c:	98 87       	std	Y+8, r25	; 0x08
    1a4e:	a9 87       	std	Y+9, r26	; 0x09
    1a50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <HLCD_enInit+0x1ac>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <HLCD_enInit+0x22a>
	else if (__tmp > 65535)
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <HLCD_enInit+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <HLCD_enInit+0x20c>
    1ab6:	80 e9       	ldi	r24, 0x90	; 144
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <HLCD_enInit+0x1fa>
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <HLCD_enInit+0x1ee>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <HLCD_enInit+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <HLCD_enInit+0x236>
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_enSetPinValue(HLCD_EN_PIN, LOW);
    1b06:	80 e2       	ldi	r24, 0x20	; 32
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/// Step 3 --> Send Command
	HLCD_enSendCommand(HLCD_CMD_FUNCTION_SET_2LINES_5X8_4BIT);
    1b0e:	88 e2       	ldi	r24, 0x28	; 40
    1b10:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>
	/** Display Control Command **/
	HLCD_enSendCommand(HLCD_CMD_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
    1b14:	8c e0       	ldi	r24, 0x0C	; 12
    1b16:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>
	/** Display Clear Command **/
	HLCD_enSendCommand(HLCD_CMD_CLEAR_DISPLAY);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>
	/** Entry Mode Set **/
	HLCD_enSendCommand(HLCD_CMD_ENTRY_MODE_SET_INC_NO_SHIFT);
    1b20:	86 e0       	ldi	r24, 0x06	; 6
    1b22:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>

	/**
	 * Note: Delay after each Send Command is included in Send Command Function.
	 */

	return Local_enState;
    1b26:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1b28:	6d 96       	adiw	r28, 0x1d	; 29
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <HLCD_enSendCommand>:

ErrorState_t HLCD_enSendCommand(u8 copy_u8Command) {
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	00 d0       	rcall	.+0      	; 0x1b40 <HLCD_enSendCommand+0x6>
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1b46:	19 82       	std	Y+1, r1	; 0x01
	/** Set RS to High for Sending Command **/
	MDIO_enSetPinValue(HLCD_RS_PIN, LOW);
    1b48:	8e e1       	ldi	r24, 0x1E	; 30
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/** Set RW to Low for Writing **/
	MDIO_enSetPinValue(HLCD_RW_PIN, LOW);
    1b50:	8f e1       	ldi	r24, 0x1F	; 31
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/** Send Command to Data Pins (4-Bit or 8-Bit Mode) **/
	HLCD_voidNLatch(copy_u8Command);
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	0e 94 06 0b 	call	0x160c	; 0x160c <HLCD_voidNLatch>
	return Local_enState;
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <HLCD_enSendData>:

ErrorState_t HLCD_enSendData(u8 copy_u8Data) {
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <HLCD_enSendData+0x6>
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    1b76:	19 82       	std	Y+1, r1	; 0x01
	/** Set RS to High for Sending Data **/
	MDIO_enSetPinValue(HLCD_RS_PIN, HIGH);
    1b78:	8e e1       	ldi	r24, 0x1E	; 30
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/** Set RW to Low for Writing **/
	MDIO_enSetPinValue(HLCD_RW_PIN, LOW);
    1b80:	8f e1       	ldi	r24, 0x1F	; 31
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/** Send Data to Data Pins (4-Bit or 8-Bit Mode) **/
	HLCD_voidNLatch(copy_u8Data);
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	0e 94 06 0b 	call	0x160c	; 0x160c <HLCD_voidNLatch>
	return Local_enState;
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <HLCD_enSendString>:

ErrorState_t HLCD_enSendString(const char *ptrString) {
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	e1 97       	sbiw	r28, 0x31	; 49
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	99 ab       	std	Y+49, r25	; 0x31
    1bb0:	88 ab       	std	Y+48, r24	; 0x30
	ErrorState_t Local_enState = SUCCESS;
    1bb2:	1f a6       	std	Y+47, r1	; 0x2f
	if (NULL != ptrString) {
    1bb4:	88 a9       	ldd	r24, Y+48	; 0x30
    1bb6:	99 a9       	ldd	r25, Y+49	; 0x31
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <HLCD_enSendString+0x24>
    1bbc:	93 c1       	rjmp	.+806    	; 0x1ee4 <HLCD_enSendString+0x34a>
		s8 Local_s8Counter1 = 0; // Count the String Characters
    1bbe:	1e a6       	std	Y+46, r1	; 0x2e
		s8 Local_s8Counter2 = 0; // Count Position of Y
    1bc0:	1d a6       	std	Y+45, r1	; 0x2d
		s8 Local_s8Counter3 = 0; // Inner Counter to Clear LCD when it FUll
    1bc2:	1c a6       	std	Y+44, r1	; 0x2c
		u8 Local_u8InitialX = 0;
    1bc4:	1b a6       	std	Y+43, r1	; 0x2b
    1bc6:	7f c1       	rjmp	.+766    	; 0x1ec6 <HLCD_enSendString+0x32c>
		while (ptrString[Local_s8Counter1] != '\0') {
			/** This part to handle overflow of the row and entire LCD **/
			if (Local_s8Counter2 == 16) {
    1bc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bca:	80 31       	cpi	r24, 0x10	; 16
    1bcc:	61 f4       	brne	.+24     	; 0x1be6 <HLCD_enSendString+0x4c>
				TOGG_BIT(Local_u8InitialX, 0);
    1bce:	9b a5       	ldd	r25, Y+43	; 0x2b
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 27       	eor	r24, r25
    1bd4:	8b a7       	std	Y+43, r24	; 0x2b
				HLCD_enGoToXY(Local_u8InitialX, 0);
    1bd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				Local_s8Counter2 = 0;
    1bde:	1d a6       	std	Y+45, r1	; 0x2d
				Local_s8Counter3++;
    1be0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	8c a7       	std	Y+44, r24	; 0x2c
			} // if Local_s8Counter2 == 16
			if (Local_s8Counter3 == 2) {
    1be6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	09 f0       	breq	.+2      	; 0x1bee <HLCD_enSendString+0x54>
    1bec:	e7 c0       	rjmp	.+462    	; 0x1dbc <HLCD_enSendString+0x222>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	aa ef       	ldi	r26, 0xFA	; 250
    1bf4:	b3 e4       	ldi	r27, 0x43	; 67
    1bf6:	8f a3       	std	Y+39, r24	; 0x27
    1bf8:	98 a7       	std	Y+40, r25	; 0x28
    1bfa:	a9 a7       	std	Y+41, r26	; 0x29
    1bfc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a e7       	ldi	r20, 0x7A	; 122
    1c0c:	55 e4       	ldi	r21, 0x45	; 69
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8b a3       	std	Y+35, r24	; 0x23
    1c18:	9c a3       	std	Y+36, r25	; 0x24
    1c1a:	ad a3       	std	Y+37, r26	; 0x25
    1c1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c20:	7c a1       	ldd	r23, Y+36	; 0x24
    1c22:	8d a1       	ldd	r24, Y+37	; 0x25
    1c24:	9e a1       	ldd	r25, Y+38	; 0x26
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <HLCD_enSendString+0xa6>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <HLCD_enSendString+0x124>
	else if (__tmp > 65535)
    1c40:	6b a1       	ldd	r22, Y+35	; 0x23
    1c42:	7c a1       	ldd	r23, Y+36	; 0x24
    1c44:	8d a1       	ldd	r24, Y+37	; 0x25
    1c46:	9e a1       	ldd	r25, Y+38	; 0x26
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <HLCD_enSendString+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <HLCD_enSendString+0x106>
    1c82:	80 e9       	ldi	r24, 0x90	; 144
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	98 a3       	std	Y+32, r25	; 0x20
    1c88:	8f 8f       	std	Y+31, r24	; 0x1f
    1c8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <HLCD_enSendString+0xf4>
    1c92:	98 a3       	std	Y+32, r25	; 0x20
    1c94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	89 a1       	ldd	r24, Y+33	; 0x21
    1c98:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9a a3       	std	Y+34, r25	; 0x22
    1c9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <HLCD_enSendString+0xe8>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <HLCD_enSendString+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cac:	7c a1       	ldd	r23, Y+36	; 0x24
    1cae:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <HLCD_enSendString+0x130>
    1cce:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd0:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(HLCD_OVERFLOW_DELAY);
				HLCD_enClearDisplay();
    1cd2:	0e 94 3e 10 	call	0x207c	; 0x207c <HLCD_enClearDisplay>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	aa ef       	ldi	r26, 0xFA	; 250
    1cdc:	b3 e4       	ldi	r27, 0x43	; 67
    1cde:	89 8f       	std	Y+25, r24	; 0x19
    1ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a e7       	ldi	r20, 0x7A	; 122
    1cf4:	55 e4       	ldi	r21, 0x45	; 69
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8d 8b       	std	Y+21, r24	; 0x15
    1d00:	9e 8b       	std	Y+22, r25	; 0x16
    1d02:	af 8b       	std	Y+23, r26	; 0x17
    1d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d06:	6d 89       	ldd	r22, Y+21	; 0x15
    1d08:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <HLCD_enSendString+0x18e>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <HLCD_enSendString+0x20c>
	else if (__tmp > 65535)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <HLCD_enSendString+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <HLCD_enSendString+0x1ee>
    1d6a:	80 e9       	ldi	r24, 0x90	; 144
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
    1d72:	89 89       	ldd	r24, Y+17	; 0x11
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <HLCD_enSendString+0x1dc>
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <HLCD_enSendString+0x1d0>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <HLCD_enSendString+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	98 89       	ldd	r25, Y+16	; 0x10
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <HLCD_enSendString+0x218>
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(HLCD_OVERFLOW_DELAY);
				Local_s8Counter3 = 0;
    1dba:	1c a6       	std	Y+44, r1	; 0x2c
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e0       	ldi	r26, 0x00	; 0
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	8b 87       	std	Y+11, r24	; 0x0b
    1dc6:	9c 87       	std	Y+12, r25	; 0x0c
    1dc8:	ad 87       	std	Y+13, r26	; 0x0d
    1dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a e7       	ldi	r20, 0x7A	; 122
    1dda:	55 e4       	ldi	r21, 0x45	; 69
    1ddc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	8f 83       	std	Y+7, r24	; 0x07
    1de6:	98 87       	std	Y+8, r25	; 0x08
    1de8:	a9 87       	std	Y+9, r26	; 0x09
    1dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <HLCD_enSendString+0x274>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <HLCD_enSendString+0x2f2>
	else if (__tmp > 65535)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <HLCD_enSendString+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <HLCD_enSendString+0x2d4>
    1e50:	80 e9       	ldi	r24, 0x90	; 144
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <HLCD_enSendString+0x2c2>
    1e60:	9c 83       	std	Y+4, r25	; 0x04
    1e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <HLCD_enSendString+0x2b6>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <HLCD_enSendString+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	9a 81       	ldd	r25, Y+2	; 0x02
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <HLCD_enSendString+0x2fe>
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
			} // if Local_s8Counter3 == 2
			/** This part to handle overflow of the row and entire LCD **/
			_delay_ms(HLCD_WRITING_DELAY);
			HLCD_enSendData(ptrString[Local_s8Counter1]);
    1ea0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	33 27       	eor	r19, r19
    1ea6:	27 fd       	sbrc	r18, 7
    1ea8:	30 95       	com	r19
    1eaa:	88 a9       	ldd	r24, Y+48	; 0x30
    1eac:	99 a9       	ldd	r25, Y+49	; 0x31
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	80 81       	ld	r24, Z
    1eb6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
			Local_s8Counter1++;
    1eba:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ebc:	8f 5f       	subi	r24, 0xFF	; 255
    1ebe:	8e a7       	std	Y+46, r24	; 0x2e
			Local_s8Counter2++;
    1ec0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	8d a7       	std	Y+45, r24	; 0x2d
	if (NULL != ptrString) {
		s8 Local_s8Counter1 = 0; // Count the String Characters
		s8 Local_s8Counter2 = 0; // Count Position of Y
		s8 Local_s8Counter3 = 0; // Inner Counter to Clear LCD when it FUll
		u8 Local_u8InitialX = 0;
		while (ptrString[Local_s8Counter1] != '\0') {
    1ec6:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ec8:	28 2f       	mov	r18, r24
    1eca:	33 27       	eor	r19, r19
    1ecc:	27 fd       	sbrc	r18, 7
    1ece:	30 95       	com	r19
    1ed0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ed2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e2 0f       	add	r30, r18
    1ed8:	f3 1f       	adc	r31, r19
    1eda:	80 81       	ld	r24, Z
    1edc:	88 23       	and	r24, r24
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <HLCD_enSendString+0x348>
    1ee0:	73 ce       	rjmp	.-794    	; 0x1bc8 <HLCD_enSendString+0x2e>
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <HLCD_enSendString+0x34e>
			HLCD_enSendData(ptrString[Local_s8Counter1]);
			Local_s8Counter1++;
			Local_s8Counter2++;
		} // while
	} else {
		Local_enState = NULL_POINTER_ERR;
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
	} // else
	return Local_enState;
    1ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
}
    1eea:	e1 96       	adiw	r28, 0x31	; 49
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <HLCD_enSendIntegerNumber>:

ErrorState_t HLCD_enSendIntegerNumber(s32 copy_s32Num) {
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	60 97       	sbiw	r28, 0x10	; 16
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	6d 87       	std	Y+13, r22	; 0x0d
    1f16:	7e 87       	std	Y+14, r23	; 0x0e
    1f18:	8f 87       	std	Y+15, r24	; 0x0f
    1f1a:	98 8b       	std	Y+16, r25	; 0x10
	ErrorState_t Local_enState = SUCCESS;
    1f1c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Numbers[10];
	s8 Local_s8Counter = 0;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
	if (0 == copy_s32Num) {
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	af 85       	ldd	r26, Y+15	; 0x0f
    1f26:	b8 89       	ldd	r27, Y+16	; 0x10
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	a1 05       	cpc	r26, r1
    1f2c:	b1 05       	cpc	r27, r1
    1f2e:	21 f4       	brne	.+8      	; 0x1f38 <HLCD_enSendIntegerNumber+0x3c>
		HLCD_enSendData('0');
    1f30:	80 e3       	ldi	r24, 0x30	; 48
    1f32:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
    1f36:	6a c0       	rjmp	.+212    	; 0x200c <HLCD_enSendIntegerNumber+0x110>
	} else {
		if (0 > copy_s32Num) {
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f3e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f40:	bb 23       	and	r27, r27
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <HLCD_enSendIntegerNumber+0x4a>
    1f44:	42 c0       	rjmp	.+132    	; 0x1fca <HLCD_enSendIntegerNumber+0xce>
			HLCD_enSendData('-');
    1f46:	8d e2       	ldi	r24, 0x2D	; 45
    1f48:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
			copy_s32Num *= -1;
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	af 85       	ldd	r26, Y+15	; 0x0f
    1f52:	b8 89       	ldd	r27, Y+16	; 0x10
    1f54:	b0 95       	com	r27
    1f56:	a0 95       	com	r26
    1f58:	90 95       	com	r25
    1f5a:	81 95       	neg	r24
    1f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5e:	af 4f       	sbci	r26, 0xFF	; 255
    1f60:	bf 4f       	sbci	r27, 0xFF	; 255
    1f62:	8d 87       	std	Y+13, r24	; 0x0d
    1f64:	9e 87       	std	Y+14, r25	; 0x0e
    1f66:	af 87       	std	Y+15, r26	; 0x0f
    1f68:	b8 8b       	std	Y+16, r27	; 0x10
    1f6a:	2f c0       	rjmp	.+94     	; 0x1fca <HLCD_enSendIntegerNumber+0xce>
		} // if 0 > copy_s32Num
		while (copy_s32Num > 0) {
			Local_u8Numbers[Local_s8Counter] = copy_s32Num % 10;
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	08 2f       	mov	r16, r24
    1f70:	11 27       	eor	r17, r17
    1f72:	07 fd       	sbrc	r16, 7
    1f74:	10 95       	com	r17
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	af 85       	ldd	r26, Y+15	; 0x0f
    1f7c:	b8 89       	ldd	r27, Y+16	; 0x10
    1f7e:	2a e0       	ldi	r18, 0x0A	; 10
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__divmodsi4>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	28 2f       	mov	r18, r24
    1f94:	ce 01       	movw	r24, r28
    1f96:	03 96       	adiw	r24, 0x03	; 3
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e0 0f       	add	r30, r16
    1f9c:	f1 1f       	adc	r31, r17
    1f9e:	20 83       	st	Z, r18
			copy_s32Num /= 10;
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	af 85       	ldd	r26, Y+15	; 0x0f
    1fa6:	b8 89       	ldd	r27, Y+16	; 0x10
    1fa8:	2a e0       	ldi	r18, 0x0A	; 10
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__divmodsi4>
    1fb8:	da 01       	movw	r26, r20
    1fba:	c9 01       	movw	r24, r18
    1fbc:	8d 87       	std	Y+13, r24	; 0x0d
    1fbe:	9e 87       	std	Y+14, r25	; 0x0e
    1fc0:	af 87       	std	Y+15, r26	; 0x0f
    1fc2:	b8 8b       	std	Y+16, r27	; 0x10
			Local_s8Counter++;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	89 83       	std	Y+1, r24	; 0x01
	} else {
		if (0 > copy_s32Num) {
			HLCD_enSendData('-');
			copy_s32Num *= -1;
		} // if 0 > copy_s32Num
		while (copy_s32Num > 0) {
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	af 85       	ldd	r26, Y+15	; 0x0f
    1fd0:	b8 89       	ldd	r27, Y+16	; 0x10
    1fd2:	18 16       	cp	r1, r24
    1fd4:	19 06       	cpc	r1, r25
    1fd6:	1a 06       	cpc	r1, r26
    1fd8:	1b 06       	cpc	r1, r27
    1fda:	44 f2       	brlt	.-112    	; 0x1f6c <HLCD_enSendIntegerNumber+0x70>
			Local_u8Numbers[Local_s8Counter] = copy_s32Num % 10;
			copy_s32Num /= 10;
			Local_s8Counter++;
		} // while
		Local_s8Counter--;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	11 c0       	rjmp	.+34     	; 0x2006 <HLCD_enSendIntegerNumber+0x10a>
		for (; Local_s8Counter >= 0; Local_s8Counter--) {
			HLCD_enSendData(Local_u8Numbers[Local_s8Counter] + '0');
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	33 27       	eor	r19, r19
    1fea:	27 fd       	sbrc	r18, 7
    1fec:	30 95       	com	r19
    1fee:	ce 01       	movw	r24, r28
    1ff0:	03 96       	adiw	r24, 0x03	; 3
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e2 0f       	add	r30, r18
    1ff6:	f3 1f       	adc	r31, r19
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 5d       	subi	r24, 0xD0	; 208
    1ffc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
			Local_u8Numbers[Local_s8Counter] = copy_s32Num % 10;
			copy_s32Num /= 10;
			Local_s8Counter++;
		} // while
		Local_s8Counter--;
		for (; Local_s8Counter >= 0; Local_s8Counter--) {
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	81 50       	subi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	88 23       	and	r24, r24
    200a:	64 f7       	brge	.-40     	; 0x1fe4 <HLCD_enSendIntegerNumber+0xe8>
			HLCD_enSendData(Local_u8Numbers[Local_s8Counter] + '0');
		} // for
	} // else copy_s32Num != 0
	return Local_enState;
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    200e:	60 96       	adiw	r28, 0x10	; 16
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <HLCD_enGoToXY>:

ErrorState_t HLCD_enGoToXY(u8 copy_u8X, u8 copy_u8Y) {
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	00 d0       	rcall	.+0      	; 0x202a <HLCD_enGoToXY+0x6>
    202a:	00 d0       	rcall	.+0      	; 0x202c <HLCD_enGoToXY+0x8>
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	6c 83       	std	Y+4, r22	; 0x04
	ErrorState_t Local_enState = SUCCESS;
    2034:	1a 82       	std	Y+2, r1	; 0x02
	/** Calculating Address **/
	u8 Local_u8Address;
	if (((copy_u8X >= 0) && (copy_u8X <= 2))
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	80 f4       	brcc	.+32     	; 0x205c <HLCD_enGoToXY+0x38>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	80 31       	cpi	r24, 0x10	; 16
    2040:	68 f4       	brcc	.+26     	; 0x205c <HLCD_enGoToXY+0x38>
			&& ((copy_u8Y >= 0) && (copy_u8Y <= 15))) {
		if (0 == copy_u8X) {
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	88 23       	and	r24, r24
    2046:	19 f4       	brne	.+6      	; 0x204e <HLCD_enGoToXY+0x2a>
			/** Location for First Line **/
			Local_u8Address = copy_u8Y;
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <HLCD_enGoToXY+0x3c>
		} else if ((1 == copy_u8X)) {
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	31 f4       	brne	.+12     	; 0x2060 <HLCD_enGoToXY+0x3c>
			/** Location for Second Line **/
			Local_u8Address = HLCD_SECOND_ROW_INITIAL_ADDRESS + copy_u8Y;
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	80 5c       	subi	r24, 0xC0	; 192
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <HLCD_enGoToXY+0x3c>
		}
	} else {
		Local_enState = OUT_OF_RANGE_ERR;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	8a 83       	std	Y+2, r24	; 0x02
	}
	/** Set DDRAM Address then Send Command **/
	HLCD_enSendCommand(SET_BIT(Local_u8Address, 7));
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	80 68       	ori	r24, 0x80	; 128
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>
	return Local_enState;
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <HLCD_enClearDisplay>:

ErrorState_t HLCD_enClearDisplay(void) {
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState = SUCCESS;
    2086:	19 82       	std	Y+1, r1	; 0x01
	HLCD_enSendCommand(HLCD_CMD_CLEAR_DISPLAY);
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>
	return Local_enState;
    208e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <HLCD_enClearCharachter>:

ErrorState_t HLCD_enClearCharachter(u8 copy_u8X, u8 copy_u8Y, u8 copy_u8Length) {
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <HLCD_enClearCharachter+0x6>
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <HLCD_enClearCharachter+0x8>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	8b 83       	std	Y+3, r24	; 0x03
    20a8:	6c 83       	std	Y+4, r22	; 0x04
    20aa:	4d 83       	std	Y+5, r20	; 0x05
	ErrorState_t Local_enState = SUCCESS;
    20ac:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterrator;
	HLCD_enGoToXY(copy_u8X, copy_u8Y);
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	6c 81       	ldd	r22, Y+4	; 0x04
    20b2:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
	for (Local_u8Iterrator = 0; Local_u8Iterrator < copy_u8Length;
    20b6:	19 82       	std	Y+1, r1	; 0x01
    20b8:	06 c0       	rjmp	.+12     	; 0x20c6 <HLCD_enClearCharachter+0x2e>
			Local_u8Iterrator++) {
		HLCD_enSendData(' ');
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
ErrorState_t HLCD_enClearCharachter(u8 copy_u8X, u8 copy_u8Y, u8 copy_u8Length) {
	ErrorState_t Local_enState = SUCCESS;
	u8 Local_u8Iterrator;
	HLCD_enGoToXY(copy_u8X, copy_u8Y);
	for (Local_u8Iterrator = 0; Local_u8Iterrator < copy_u8Length;
			Local_u8Iterrator++) {
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	89 83       	std	Y+1, r24	; 0x01

ErrorState_t HLCD_enClearCharachter(u8 copy_u8X, u8 copy_u8Y, u8 copy_u8Length) {
	ErrorState_t Local_enState = SUCCESS;
	u8 Local_u8Iterrator;
	HLCD_enGoToXY(copy_u8X, copy_u8Y);
	for (Local_u8Iterrator = 0; Local_u8Iterrator < copy_u8Length;
    20c6:	99 81       	ldd	r25, Y+1	; 0x01
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	98 17       	cp	r25, r24
    20cc:	b0 f3       	brcs	.-20     	; 0x20ba <HLCD_enClearCharachter+0x22>
			Local_u8Iterrator++) {
		HLCD_enSendData(' ');
	}
	return Local_enState;
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <HLCD_enSendCustomPattern>:

ErrorState_t HLCD_enSendCustomPattern(u8 *ptrPattern, u8 copy_u8PatternNum) {
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <HLCD_enSendCustomPattern+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <HLCD_enSendCustomPattern+0x8>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <HLCD_enSendCustomPattern+0xa>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9d 83       	std	Y+5, r25	; 0x05
    20f0:	8c 83       	std	Y+4, r24	; 0x04
    20f2:	6e 83       	std	Y+6, r22	; 0x06
	ErrorState_t Local_enState = SUCCESS;
    20f4:	1b 82       	std	Y+3, r1	; 0x03
	if (NULL != ptrPattern) {
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	9d 81       	ldd	r25, Y+5	; 0x05
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	51 f1       	breq	.+84     	; 0x2152 <HLCD_enSendCustomPattern+0x72>
		 *  Notes :
		 *  	- Pattern Number - 1 as it Starts from 0 to 7
		 *  	- Multiplied by 8 as each Pattern is 8 Rows
		 */

		u8 Local_u8Address = (copy_u8PatternNum - 1) * 8;
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8Counter = 0;
    2114:	19 82       	std	Y+1, r1	; 0x01
		/** Set CGRAM Address then Sending Command **/
		HLCD_enSendCommand(SET_BIT(Local_u8Address, 6));
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	80 64       	ori	r24, 0x40	; 64
    211a:	8a 83       	std	Y+2, r24	; 0x02
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <HLCD_enSendCommand>
		/** Write Pattern in CGRAM **/
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++) {
    2122:	19 82       	std	Y+1, r1	; 0x01
    2124:	0e c0       	rjmp	.+28     	; 0x2142 <HLCD_enSendCustomPattern+0x62>
			HLCD_enSendData(ptrPattern[Local_u8Counter]);
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	fc 01       	movw	r30, r24
    2132:	e2 0f       	add	r30, r18
    2134:	f3 1f       	adc	r31, r19
    2136:	80 81       	ld	r24, Z
    2138:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
		u8 Local_u8Address = (copy_u8PatternNum - 1) * 8;
		u8 Local_u8Counter = 0;
		/** Set CGRAM Address then Sending Command **/
		HLCD_enSendCommand(SET_BIT(Local_u8Address, 6));
		/** Write Pattern in CGRAM **/
		for (Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++) {
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	88 30       	cpi	r24, 0x08	; 8
    2146:	78 f3       	brcs	.-34     	; 0x2126 <HLCD_enSendCustomPattern+0x46>
			HLCD_enSendData(ptrPattern[Local_u8Counter]);
		}
		/** Go Back to the DDRAM **/
		HLCD_enGoToXY(0, 0);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <HLCD_enSendCustomPattern+0x76>
	} else {
		Local_enState = NULL_POINTER_ERR;
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	8b 83       	std	Y+3, r24	; 0x03
	}
	return Local_enState;
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2158:	26 96       	adiw	r28, 0x06	; 6
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <HLCD_enDisplayCustomPattern>:

ErrorState_t HLCD_enDisplayCustomPattern(u8 copy_u8PatternNum) {
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	00 d0       	rcall	.+0      	; 0x2170 <HLCD_enDisplayCustomPattern+0x6>
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	8a 83       	std	Y+2, r24	; 0x02
	ErrorState_t Local_enState = SUCCESS;
    2176:	19 82       	std	Y+1, r1	; 0x01
	HLCD_enSendData(copy_u8PatternNum - 1);
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	81 50       	subi	r24, 0x01	; 1
    217c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <HLCD_enSendData>
	return Local_enState;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
}
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <HKEYPAD_enInit>:
#include <MDIO_interface.h>
#include <HKEYPAD_private.h>
#include <HKEYPAD_config.h>
#include <HKEYPAD_interface.h>

ErrorState_t HKEYPAD_enInit(void) {
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t Local_enState = SUCCESS;
    2196:	19 82       	std	Y+1, r1	; 0x01
	/** Set Pin Direction for Rows as Input **/
	MDIO_enSetPinDirection(HKEYPAD_R1, INPUT);
    2198:	88 e2       	ldi	r24, 0x28	; 40
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_R2, INPUT);
    21a0:	89 e2       	ldi	r24, 0x29	; 41
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_R3, INPUT);
    21a8:	8a e2       	ldi	r24, 0x2A	; 42
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_R4, INPUT);
    21b0:	8b e2       	ldi	r24, 0x2B	; 43
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	/** Activation Pull-Up Resistor **/
	MDIO_enSetPinValue(HKEYPAD_R1, HIGH);
    21b8:	88 e2       	ldi	r24, 0x28	; 40
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_R2, HIGH);
    21c0:	89 e2       	ldi	r24, 0x29	; 41
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_R3, HIGH);
    21c8:	8a e2       	ldi	r24, 0x2A	; 42
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_R4, HIGH);
    21d0:	8b e2       	ldi	r24, 0x2B	; 43
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	/** Set Pin Direction for Columns as Output **/
	MDIO_enSetPinDirection(HKEYPAD_C1, OUTPUT);
    21d8:	8c e2       	ldi	r24, 0x2C	; 44
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_C2, OUTPUT);
    21e0:	8d e2       	ldi	r24, 0x2D	; 45
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_C3, OUTPUT);
    21e8:	8e e2       	ldi	r24, 0x2E	; 46
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	MDIO_enSetPinDirection(HKEYPAD_C4, OUTPUT);
    21f0:	8f e2       	ldi	r24, 0x2F	; 47
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_enSetPinDirection>
	/** Set Pin Value for Columns Initially High **/
	MDIO_enSetPinValue(HKEYPAD_C1, HIGH);
    21f8:	8c e2       	ldi	r24, 0x2C	; 44
    21fa:	61 e0       	ldi	r22, 0x01	; 1
    21fc:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_C2, HIGH);
    2200:	8d e2       	ldi	r24, 0x2D	; 45
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_C3, HIGH);
    2208:	8e e2       	ldi	r24, 0x2E	; 46
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	MDIO_enSetPinValue(HKEYPAD_C4, HIGH);
    2210:	8f e2       	ldi	r24, 0x2F	; 47
    2212:	61 e0       	ldi	r22, 0x01	; 1
    2214:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
	return Local_enState;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
}
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <HKEYPAD_enGetPressedKey>:

ErrorState_t HKEYPAD_enGetPressedKey(u8 *ptrKey) {
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	28 97       	sbiw	r28, 0x08	; 8
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	98 87       	std	Y+8, r25	; 0x08
    2238:	8f 83       	std	Y+7, r24	; 0x07
	ErrorState_t Local_enState = SUCCESS;
    223a:	1d 82       	std	Y+5, r1	; 0x05
	if (NULL != ptrKey) {
    223c:	8f 81       	ldd	r24, Y+7	; 0x07
    223e:	98 85       	ldd	r25, Y+8	; 0x08
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	09 f4       	brne	.+2      	; 0x2246 <HKEYPAD_enGetPressedKey+0x24>
    2244:	68 c0       	rjmp	.+208    	; 0x2316 <HKEYPAD_enGetPressedKey+0xf4>
		HKEYPAD_KEYS;
		u8 static Local_u8Rows[] = HKEYPAD_ROWS;
		u8 static Local_u8Columns[] = HKEYPAD_COLUMNS;
		u8 Local_u8RowCounter;
		u8 Local_u8ColumnCounter;
		u8 Local_u8Flag = 0; // To finish looping if key pressed
    2246:	1a 82       	std	Y+2, r1	; 0x02
		u8 Local_u8KeyState;
		u8 Local_u8PressedKey = HKEYPAD_NO_PRESSED_KEY;
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	89 83       	std	Y+1, r24	; 0x01
		for (Local_u8ColumnCounter = 0;
    224c:	1b 82       	std	Y+3, r1	; 0x03
    224e:	57 c0       	rjmp	.+174    	; 0x22fe <HKEYPAD_enGetPressedKey+0xdc>
				(Local_u8ColumnCounter < HKEYPAD_COLUMN_SIZE)
						&& (Local_u8Flag == 0); Local_u8ColumnCounter++) {
			/** Activate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter],
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fc 01       	movw	r30, r24
    2258:	e3 58       	subi	r30, 0x83	; 131
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
			HKEYPAD_KEY_PRESSED);
			for (Local_u8RowCounter = 0;
    2264:	1c 82       	std	Y+4, r1	; 0x04
    2266:	38 c0       	rjmp	.+112    	; 0x22d8 <HKEYPAD_enGetPressedKey+0xb6>
					(Local_u8RowCounter < HKEYPAD_ROW_SIZE)
							&& (Local_u8Flag == 0); Local_u8RowCounter++) {
				/** Read the Current Row **/
				MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	fc 01       	movw	r30, r24
    2270:	ef 57       	subi	r30, 0x7F	; 127
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	9e 01       	movw	r18, r28
    2278:	2a 5f       	subi	r18, 0xFA	; 250
    227a:	3f 4f       	sbci	r19, 0xFF	; 255
    227c:	b9 01       	movw	r22, r18
    227e:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_enGetPinValue>
						&Local_u8KeyState);
				if (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
    2282:	8e 81       	ldd	r24, Y+6	; 0x06
    2284:	88 23       	and	r24, r24
    2286:	29 f5       	brne	.+74     	; 0x22d2 <HKEYPAD_enGetPressedKey+0xb0>
    2288:	0d c0       	rjmp	.+26     	; 0x22a4 <HKEYPAD_enGetPressedKey+0x82>
					/** Long Press Elimination **/
					while (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
						MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	fc 01       	movw	r30, r24
    2292:	ef 57       	subi	r30, 0x7F	; 127
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	9e 01       	movw	r18, r28
    229a:	2a 5f       	subi	r18, 0xFA	; 250
    229c:	3f 4f       	sbci	r19, 0xFF	; 255
    229e:	b9 01       	movw	r22, r18
    22a0:	0e 94 4f 08 	call	0x109e	; 0x109e <MDIO_enGetPinValue>
				/** Read the Current Row **/
				MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
						&Local_u8KeyState);
				if (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
					/** Long Press Elimination **/
					while (Local_u8KeyState == HKEYPAD_KEY_PRESSED) {
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	88 23       	and	r24, r24
    22a8:	81 f3       	breq	.-32     	; 0x228a <HKEYPAD_enGetPressedKey+0x68>
						MDIO_enGetPinValue(Local_u8Rows[Local_u8RowCounter],
								&Local_u8KeyState);
					} // while Key is Pressed
					Local_u8PressedKey =
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	48 2f       	mov	r20, r24
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	ca 01       	movw	r24, r20
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	82 0f       	add	r24, r18
    22c2:	93 1f       	adc	r25, r19
    22c4:	fc 01       	movw	r30, r24
    22c6:	eb 57       	subi	r30, 0x7B	; 123
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	89 83       	std	Y+1, r24	; 0x01
							Local_u8Keys[Local_u8RowCounter][Local_u8ColumnCounter];
					Local_u8Flag = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	8a 83       	std	Y+2, r24	; 0x02
			/** Activate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter],
			HKEYPAD_KEY_PRESSED);
			for (Local_u8RowCounter = 0;
					(Local_u8RowCounter < HKEYPAD_ROW_SIZE)
							&& (Local_u8Flag == 0); Local_u8RowCounter++) {
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	8c 83       	std	Y+4, r24	; 0x04
						&& (Local_u8Flag == 0); Local_u8ColumnCounter++) {
			/** Activate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter],
			HKEYPAD_KEY_PRESSED);
			for (Local_u8RowCounter = 0;
					(Local_u8RowCounter < HKEYPAD_ROW_SIZE)
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	18 f4       	brcc	.+6      	; 0x22e4 <HKEYPAD_enGetPressedKey+0xc2>
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	88 23       	and	r24, r24
    22e2:	11 f2       	breq	.-124    	; 0x2268 <HKEYPAD_enGetPressedKey+0x46>
							Local_u8Keys[Local_u8RowCounter][Local_u8ColumnCounter];
					Local_u8Flag = 1;
				} // if Key Pressed
			} // for --> Looping on Rows
			/** Deactivate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter], HIGH);
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	fc 01       	movw	r30, r24
    22ec:	e3 58       	subi	r30, 0x83	; 131
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	0e 94 f5 06 	call	0xdea	; 0xdea <MDIO_enSetPinValue>
		u8 Local_u8Flag = 0; // To finish looping if key pressed
		u8 Local_u8KeyState;
		u8 Local_u8PressedKey = HKEYPAD_NO_PRESSED_KEY;
		for (Local_u8ColumnCounter = 0;
				(Local_u8ColumnCounter < HKEYPAD_COLUMN_SIZE)
						&& (Local_u8Flag == 0); Local_u8ColumnCounter++) {
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	8f 5f       	subi	r24, 0xFF	; 255
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		u8 Local_u8ColumnCounter;
		u8 Local_u8Flag = 0; // To finish looping if key pressed
		u8 Local_u8KeyState;
		u8 Local_u8PressedKey = HKEYPAD_NO_PRESSED_KEY;
		for (Local_u8ColumnCounter = 0;
				(Local_u8ColumnCounter < HKEYPAD_COLUMN_SIZE)
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	84 30       	cpi	r24, 0x04	; 4
    2302:	20 f4       	brcc	.+8      	; 0x230c <HKEYPAD_enGetPressedKey+0xea>
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	88 23       	and	r24, r24
    2308:	09 f4       	brne	.+2      	; 0x230c <HKEYPAD_enGetPressedKey+0xea>
    230a:	a2 cf       	rjmp	.-188    	; 0x2250 <HKEYPAD_enGetPressedKey+0x2e>
				} // if Key Pressed
			} // for --> Looping on Rows
			/** Deactivate Current Column **/
			MDIO_enSetPinValue(Local_u8Columns[Local_u8ColumnCounter], HIGH);
		} // for --> Looping on Columns
		*ptrKey = Local_u8PressedKey;
    230c:	ef 81       	ldd	r30, Y+7	; 0x07
    230e:	f8 85       	ldd	r31, Y+8	; 0x08
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	80 83       	st	Z, r24
    2314:	02 c0       	rjmp	.+4      	; 0x231a <HKEYPAD_enGetPressedKey+0xf8>
	} else {
		Local_enState = NULL_POINTER_ERR;
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_enState;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    231c:	28 96       	adiw	r28, 0x08	; 8
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <main>:

#define HOURS_SECTION     0
#define MINUTES_SECTION   1
#define SECONDS_SECTION   2

void main(void) {
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	e7 97       	sbiw	r28, 0x37	; 55
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
	u8 arrowPattern[]  = { 0x04, 0x0E, 0x1F, 0x0E, 0x0E, 0x0E, 0x0E, 0x00 };
    2342:	9e 01       	movw	r18, r28
    2344:	29 5e       	subi	r18, 0xE9	; 233
    2346:	3f 4f       	sbci	r19, 0xFF	; 255
    2348:	3f a7       	std	Y+47, r19	; 0x2f
    234a:	2e a7       	std	Y+46, r18	; 0x2e
    234c:	8d e9       	ldi	r24, 0x9D	; 157
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	99 ab       	std	Y+49, r25	; 0x31
    2352:	88 ab       	std	Y+48, r24	; 0x30
    2354:	98 e0       	ldi	r25, 0x08	; 8
    2356:	9a ab       	std	Y+50, r25	; 0x32
    2358:	e8 a9       	ldd	r30, Y+48	; 0x30
    235a:	f9 a9       	ldd	r31, Y+49	; 0x31
    235c:	00 80       	ld	r0, Z
    235e:	28 a9       	ldd	r18, Y+48	; 0x30
    2360:	39 a9       	ldd	r19, Y+49	; 0x31
    2362:	2f 5f       	subi	r18, 0xFF	; 255
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	39 ab       	std	Y+49, r19	; 0x31
    2368:	28 ab       	std	Y+48, r18	; 0x30
    236a:	ee a5       	ldd	r30, Y+46	; 0x2e
    236c:	ff a5       	ldd	r31, Y+47	; 0x2f
    236e:	00 82       	st	Z, r0
    2370:	2e a5       	ldd	r18, Y+46	; 0x2e
    2372:	3f a5       	ldd	r19, Y+47	; 0x2f
    2374:	2f 5f       	subi	r18, 0xFF	; 255
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	3f a7       	std	Y+47, r19	; 0x2f
    237a:	2e a7       	std	Y+46, r18	; 0x2e
    237c:	3a a9       	ldd	r19, Y+50	; 0x32
    237e:	31 50       	subi	r19, 0x01	; 1
    2380:	3a ab       	std	Y+50, r19	; 0x32
    2382:	8a a9       	ldd	r24, Y+50	; 0x32
    2384:	88 23       	and	r24, r24
    2386:	41 f7       	brne	.-48     	; 0x2358 <main+0x2a>
	u8 personPattern[] = { 0x0E, 0x0E, 0x04, 0x1F, 0x04, 0x0E, 0x11, 0x00 };
    2388:	fe 01       	movw	r30, r28
    238a:	7f 96       	adiw	r30, 0x1f	; 31
    238c:	fc ab       	std	Y+52, r31	; 0x34
    238e:	eb ab       	std	Y+51, r30	; 0x33
    2390:	25 e9       	ldi	r18, 0x95	; 149
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	3e ab       	std	Y+54, r19	; 0x36
    2396:	2d ab       	std	Y+53, r18	; 0x35
    2398:	38 e0       	ldi	r19, 0x08	; 8
    239a:	3f ab       	std	Y+55, r19	; 0x37
    239c:	ed a9       	ldd	r30, Y+53	; 0x35
    239e:	fe a9       	ldd	r31, Y+54	; 0x36
    23a0:	00 80       	ld	r0, Z
    23a2:	2d a9       	ldd	r18, Y+53	; 0x35
    23a4:	3e a9       	ldd	r19, Y+54	; 0x36
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	3e ab       	std	Y+54, r19	; 0x36
    23ac:	2d ab       	std	Y+53, r18	; 0x35
    23ae:	eb a9       	ldd	r30, Y+51	; 0x33
    23b0:	fc a9       	ldd	r31, Y+52	; 0x34
    23b2:	00 82       	st	Z, r0
    23b4:	2b a9       	ldd	r18, Y+51	; 0x33
    23b6:	3c a9       	ldd	r19, Y+52	; 0x34
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	3c ab       	std	Y+52, r19	; 0x34
    23be:	2b ab       	std	Y+51, r18	; 0x33
    23c0:	3f a9       	ldd	r19, Y+55	; 0x37
    23c2:	31 50       	subi	r19, 0x01	; 1
    23c4:	3f ab       	std	Y+55, r19	; 0x37
    23c6:	8f a9       	ldd	r24, Y+55	; 0x37
    23c8:	88 23       	and	r24, r24
    23ca:	41 f7       	brne	.-48     	; 0x239c <main+0x6e>
	u8 pressedKey;
	u8 hoursNum1     = 0;
    23cc:	1e 8a       	std	Y+22, r1	; 0x16
	u8 hoursNum2     = 0;
    23ce:	1d 8a       	std	Y+21, r1	; 0x15
	u8 minutesNum1   = 0;
    23d0:	1c 8a       	std	Y+20, r1	; 0x14
	u8 minutesNum2   = 0;
    23d2:	1b 8a       	std	Y+19, r1	; 0x13
	u8 secondsNum1   = 0;
    23d4:	1a 8a       	std	Y+18, r1	; 0x12
	u8 secondsNum2   = 0;
    23d6:	19 8a       	std	Y+17, r1	; 0x11
	s8 arrowPosition = 0;
    23d8:	18 8a       	std	Y+16, r1	; 0x10
	u8 enterCounter  = 0;
    23da:	1f 86       	std	Y+15, r1	; 0x0f
	Led_t led1 = { PC7, SOURCE };
    23dc:	85 e2       	ldi	r24, 0x25	; 37
    23de:	88 a7       	std	Y+40, r24	; 0x28
    23e0:	19 a6       	std	Y+41, r1	; 0x29
	HLCD_enInit();
    23e2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <HLCD_enInit>
	HKEYPAD_enInit();
    23e6:	0e 94 c6 10 	call	0x218c	; 0x218c <HKEYPAD_enInit>
	HLED_enInit(&led1);
    23ea:	ce 01       	movw	r24, r28
    23ec:	88 96       	adiw	r24, 0x28	; 40
    23ee:	0e 94 2e 0a 	call	0x145c	; 0x145c <HLED_enInit>
	HLCD_enSendCustomPattern(arrowPattern, 1);
    23f2:	ce 01       	movw	r24, r28
    23f4:	47 96       	adiw	r24, 0x17	; 23
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <HLCD_enSendCustomPattern>
	HLCD_enSendCustomPattern(personPattern, 2);
    23fc:	ce 01       	movw	r24, r28
    23fe:	4f 96       	adiw	r24, 0x1f	; 31
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	0e 94 70 10 	call	0x20e0	; 0x20e0 <HLCD_enSendCustomPattern>
	HLCD_enSendString("00:00:00");
    2406:	80 e6       	ldi	r24, 0x60	; 96
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD_enSendString>
	HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    240e:	98 89       	ldd	r25, Y+16	; 0x10
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	69 2f       	mov	r22, r25
    2414:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
	HLCD_enDisplayCustomPattern(1);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
	while (1) {
		HKEYPAD_enGetPressedKey(&pressedKey);
    241e:	ce 01       	movw	r24, r28
    2420:	87 96       	adiw	r24, 0x27	; 39
    2422:	0e 94 11 11 	call	0x2222	; 0x2222 <HKEYPAD_enGetPressedKey>
		switch (pressedKey) {
    2426:	8f a1       	ldd	r24, Y+39	; 0x27
    2428:	e8 2f       	mov	r30, r24
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	fd a7       	std	Y+45, r31	; 0x2d
    242e:	ec a7       	std	Y+44, r30	; 0x2c
    2430:	2c a5       	ldd	r18, Y+44	; 0x2c
    2432:	3d a5       	ldd	r19, Y+45	; 0x2d
    2434:	25 34       	cpi	r18, 0x45	; 69
    2436:	31 05       	cpc	r19, r1
    2438:	09 f4       	brne	.+2      	; 0x243c <main+0x10e>
    243a:	31 c1       	rjmp	.+610    	; 0x269e <main+0x370>
    243c:	8c a5       	ldd	r24, Y+44	; 0x2c
    243e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2440:	86 34       	cpi	r24, 0x46	; 70
    2442:	91 05       	cpc	r25, r1
    2444:	84 f4       	brge	.+32     	; 0x2466 <main+0x138>
    2446:	ec a5       	ldd	r30, Y+44	; 0x2c
    2448:	fd a5       	ldd	r31, Y+45	; 0x2d
    244a:	ff 23       	and	r31, r31
    244c:	44 f3       	brlt	.-48     	; 0x241e <main+0xf0>
    244e:	2c a5       	ldd	r18, Y+44	; 0x2c
    2450:	3d a5       	ldd	r19, Y+45	; 0x2d
    2452:	2a 30       	cpi	r18, 0x0A	; 10
    2454:	31 05       	cpc	r19, r1
    2456:	d4 f0       	brlt	.+52     	; 0x248c <main+0x15e>
    2458:	8c a5       	ldd	r24, Y+44	; 0x2c
    245a:	9d a5       	ldd	r25, Y+45	; 0x2d
    245c:	83 34       	cpi	r24, 0x43	; 67
    245e:	91 05       	cpc	r25, r1
    2460:	09 f4       	brne	.+2      	; 0x2464 <main+0x136>
    2462:	59 c1       	rjmp	.+690    	; 0x2716 <main+0x3e8>
    2464:	dc cf       	rjmp	.-72     	; 0x241e <main+0xf0>
    2466:	ec a5       	ldd	r30, Y+44	; 0x2c
    2468:	fd a5       	ldd	r31, Y+45	; 0x2d
    246a:	e2 35       	cpi	r30, 0x52	; 82
    246c:	f1 05       	cpc	r31, r1
    246e:	09 f4       	brne	.+2      	; 0x2472 <main+0x144>
    2470:	69 c0       	rjmp	.+210    	; 0x2544 <main+0x216>
    2472:	2c a5       	ldd	r18, Y+44	; 0x2c
    2474:	3d a5       	ldd	r19, Y+45	; 0x2d
    2476:	23 35       	cpi	r18, 0x53	; 83
    2478:	31 05       	cpc	r19, r1
    247a:	09 f4       	brne	.+2      	; 0x247e <main+0x150>
    247c:	67 c1       	rjmp	.+718    	; 0x274c <main+0x41e>
    247e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2480:	9d a5       	ldd	r25, Y+45	; 0x2d
    2482:	8c 34       	cpi	r24, 0x4C	; 76
    2484:	91 05       	cpc	r25, r1
    2486:	09 f4       	brne	.+2      	; 0x248a <main+0x15c>
    2488:	b3 c0       	rjmp	.+358    	; 0x25f0 <main+0x2c2>
    248a:	c9 cf       	rjmp	.-110    	; 0x241e <main+0xf0>
		case 0 ... 9:
			if ((pressedKey >= 6)
    248c:	8f a1       	ldd	r24, Y+39	; 0x27
    248e:	86 30       	cpi	r24, 0x06	; 6
    2490:	70 f0       	brcs	.+28     	; 0x24ae <main+0x180>
    2492:	8f 85       	ldd	r24, Y+15	; 0x0f
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	21 f4       	brne	.+8      	; 0x24a0 <main+0x172>
    2498:	88 89       	ldd	r24, Y+16	; 0x10
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	09 f4       	brne	.+2      	; 0x24a0 <main+0x172>
    249e:	bf cf       	rjmp	.-130    	; 0x241e <main+0xf0>
    24a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	21 f4       	brne	.+8      	; 0x24ae <main+0x180>
    24a6:	88 89       	ldd	r24, Y+16	; 0x10
    24a8:	86 30       	cpi	r24, 0x06	; 6
    24aa:	09 f4       	brne	.+2      	; 0x24ae <main+0x180>
    24ac:	b8 cf       	rjmp	.-144    	; 0x241e <main+0xf0>
							&& (arrowPosition == MINUTES_NUM1_POS))
							|| ((enterCounter == SECONDS_SECTION)
									&& (arrowPosition == SECONDS_NUM1_POS)))) {
				// No Action as the largest value in minutes and seconds is 59
			} else {
				HLCD_enGoToXY(LCD_FIRST_ROW, arrowPosition);
    24ae:	98 89       	ldd	r25, Y+16	; 0x10
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	69 2f       	mov	r22, r25
    24b4:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enSendIntegerNumber(pressedKey);
    24b8:	8f a1       	ldd	r24, Y+39	; 0x27
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 e0       	ldi	r26, 0x00	; 0
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
				switch (arrowPosition) {
    24ca:	88 89       	ldd	r24, Y+16	; 0x10
    24cc:	e8 2f       	mov	r30, r24
    24ce:	ff 27       	eor	r31, r31
    24d0:	e7 fd       	sbrc	r30, 7
    24d2:	f0 95       	com	r31
    24d4:	fb a7       	std	Y+43, r31	; 0x2b
    24d6:	ea a7       	std	Y+42, r30	; 0x2a
    24d8:	2a a5       	ldd	r18, Y+42	; 0x2a
    24da:	3b a5       	ldd	r19, Y+43	; 0x2b
    24dc:	23 30       	cpi	r18, 0x03	; 3
    24de:	31 05       	cpc	r19, r1
    24e0:	29 f1       	breq	.+74     	; 0x252c <main+0x1fe>
    24e2:	8a a5       	ldd	r24, Y+42	; 0x2a
    24e4:	9b a5       	ldd	r25, Y+43	; 0x2b
    24e6:	84 30       	cpi	r24, 0x04	; 4
    24e8:	91 05       	cpc	r25, r1
    24ea:	54 f4       	brge	.+20     	; 0x2500 <main+0x1d2>
    24ec:	ea a5       	ldd	r30, Y+42	; 0x2a
    24ee:	fb a5       	ldd	r31, Y+43	; 0x2b
    24f0:	30 97       	sbiw	r30, 0x00	; 0
    24f2:	b1 f0       	breq	.+44     	; 0x2520 <main+0x1f2>
    24f4:	2a a5       	ldd	r18, Y+42	; 0x2a
    24f6:	3b a5       	ldd	r19, Y+43	; 0x2b
    24f8:	21 30       	cpi	r18, 0x01	; 1
    24fa:	31 05       	cpc	r19, r1
    24fc:	a1 f0       	breq	.+40     	; 0x2526 <main+0x1f8>
    24fe:	8f cf       	rjmp	.-226    	; 0x241e <main+0xf0>
    2500:	8a a5       	ldd	r24, Y+42	; 0x2a
    2502:	9b a5       	ldd	r25, Y+43	; 0x2b
    2504:	86 30       	cpi	r24, 0x06	; 6
    2506:	91 05       	cpc	r25, r1
    2508:	b9 f0       	breq	.+46     	; 0x2538 <main+0x20a>
    250a:	ea a5       	ldd	r30, Y+42	; 0x2a
    250c:	fb a5       	ldd	r31, Y+43	; 0x2b
    250e:	e7 30       	cpi	r30, 0x07	; 7
    2510:	f1 05       	cpc	r31, r1
    2512:	a9 f0       	breq	.+42     	; 0x253e <main+0x210>
    2514:	2a a5       	ldd	r18, Y+42	; 0x2a
    2516:	3b a5       	ldd	r19, Y+43	; 0x2b
    2518:	24 30       	cpi	r18, 0x04	; 4
    251a:	31 05       	cpc	r19, r1
    251c:	51 f0       	breq	.+20     	; 0x2532 <main+0x204>
    251e:	7f cf       	rjmp	.-258    	; 0x241e <main+0xf0>
				case HOURS_NUM1_POS:
					hoursNum1   = pressedKey;
    2520:	8f a1       	ldd	r24, Y+39	; 0x27
    2522:	8e 8b       	std	Y+22, r24	; 0x16
    2524:	7c cf       	rjmp	.-264    	; 0x241e <main+0xf0>
					break;
				case HOURS_NUM2_POS:
					hoursNum2   = pressedKey;
    2526:	8f a1       	ldd	r24, Y+39	; 0x27
    2528:	8d 8b       	std	Y+21, r24	; 0x15
    252a:	79 cf       	rjmp	.-270    	; 0x241e <main+0xf0>
					break;
				case MINUTES_NUM1_POS:
					minutesNum1 = pressedKey;
    252c:	8f a1       	ldd	r24, Y+39	; 0x27
    252e:	8c 8b       	std	Y+20, r24	; 0x14
    2530:	76 cf       	rjmp	.-276    	; 0x241e <main+0xf0>
					break;
				case MINUTES_NUM2_POS:
					minutesNum2 = pressedKey;
    2532:	8f a1       	ldd	r24, Y+39	; 0x27
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	73 cf       	rjmp	.-282    	; 0x241e <main+0xf0>
					break;
				case SECONDS_NUM1_POS:
					secondsNum1 = pressedKey;
    2538:	8f a1       	ldd	r24, Y+39	; 0x27
    253a:	8a 8b       	std	Y+18, r24	; 0x12
    253c:	70 cf       	rjmp	.-288    	; 0x241e <main+0xf0>
					break;
				case SECONDS_NUM2_POS:
					secondsNum2 = pressedKey;
    253e:	8f a1       	ldd	r24, Y+39	; 0x27
    2540:	89 8b       	std	Y+17, r24	; 0x11
    2542:	6d cf       	rjmp	.-294    	; 0x241e <main+0xf0>
				} // switch
			} // else
			break;
		case 'R': // Right
			/** Handling the boundaries for (Hours - Minutes - Seconds) **/
			if ((enterCounter == HOURS_SECTION) && ((arrowPosition + 1) == 2)) {
    2544:	8f 85       	ldd	r24, Y+15	; 0x0f
    2546:	88 23       	and	r24, r24
    2548:	99 f4       	brne	.+38     	; 0x2570 <main+0x242>
    254a:	88 89       	ldd	r24, Y+16	; 0x10
    254c:	81 30       	cpi	r24, 0x01	; 1
    254e:	81 f4       	brne	.+32     	; 0x2570 <main+0x242>
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    2550:	98 89       	ldd	r25, Y+16	; 0x10
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	69 2f       	mov	r22, r25
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 0;
    255c:	18 8a       	std	Y+16, r1	; 0x10
				HLCD_enGoToXY(1, arrowPosition);
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	69 2f       	mov	r22, r25
    2564:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    256e:	57 cf       	rjmp	.-338    	; 0x241e <main+0xf0>
			} else if (enterCounter == MINUTES_SECTION
    2570:	8f 85       	ldd	r24, Y+15	; 0x0f
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	a1 f4       	brne	.+40     	; 0x259e <main+0x270>
    2576:	88 89       	ldd	r24, Y+16	; 0x10
    2578:	84 30       	cpi	r24, 0x04	; 4
    257a:	89 f4       	brne	.+34     	; 0x259e <main+0x270>
					&& ((arrowPosition + 1) == 5)) {
				HLCD_enClearCharachter(1, arrowPosition, 1);
    257c:	98 89       	ldd	r25, Y+16	; 0x10
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	69 2f       	mov	r22, r25
    2582:	41 e0       	ldi	r20, 0x01	; 1
    2584:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 3;
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    258c:	98 89       	ldd	r25, Y+16	; 0x10
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	69 2f       	mov	r22, r25
    2592:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    259c:	40 cf       	rjmp	.-384    	; 0x241e <main+0xf0>
			} else if (enterCounter == SECONDS_SECTION
    259e:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	a1 f4       	brne	.+40     	; 0x25cc <main+0x29e>
    25a4:	88 89       	ldd	r24, Y+16	; 0x10
    25a6:	87 30       	cpi	r24, 0x07	; 7
    25a8:	89 f4       	brne	.+34     	; 0x25cc <main+0x29e>
					&& ((arrowPosition + 1) == 8)) {
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    25aa:	98 89       	ldd	r25, Y+16	; 0x10
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	69 2f       	mov	r22, r25
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 6;
    25b6:	86 e0       	ldi	r24, 0x06	; 6
    25b8:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    25ba:	98 89       	ldd	r25, Y+16	; 0x10
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	69 2f       	mov	r22, r25
    25c0:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    25ca:	29 cf       	rjmp	.-430    	; 0x241e <main+0xf0>
			/** Handling the boundaries for (Hours - Minutes - Seconds) **/
			} else {
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    25cc:	98 89       	ldd	r25, Y+16	; 0x10
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	69 2f       	mov	r22, r25
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition++;
    25d8:	88 89       	ldd	r24, Y+16	; 0x10
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    25de:	98 89       	ldd	r25, Y+16	; 0x10
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	69 2f       	mov	r22, r25
    25e4:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    25ee:	17 cf       	rjmp	.-466    	; 0x241e <main+0xf0>
			}
			break;
		case 'L': // Left
			/** Handling the boundaries for (Hours - Minutes - Seconds) **/
			if ((enterCounter == HOURS_SECTION)
    25f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f2:	88 23       	and	r24, r24
    25f4:	a1 f4       	brne	.+40     	; 0x261e <main+0x2f0>
    25f6:	88 89       	ldd	r24, Y+16	; 0x10
    25f8:	88 23       	and	r24, r24
    25fa:	89 f4       	brne	.+34     	; 0x261e <main+0x2f0>
					&& ((arrowPosition - 1) == -1)) {
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    25fc:	98 89       	ldd	r25, Y+16	; 0x10
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	69 2f       	mov	r22, r25
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 1;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    260c:	98 89       	ldd	r25, Y+16	; 0x10
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	69 2f       	mov	r22, r25
    2612:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    261c:	00 cf       	rjmp	.-512    	; 0x241e <main+0xf0>
			} else if (enterCounter == MINUTES_SECTION
    261e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	a1 f4       	brne	.+40     	; 0x264c <main+0x31e>
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	83 30       	cpi	r24, 0x03	; 3
    2628:	89 f4       	brne	.+34     	; 0x264c <main+0x31e>
					&& ((arrowPosition - 1) == 2)) {
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    262a:	98 89       	ldd	r25, Y+16	; 0x10
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	69 2f       	mov	r22, r25
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 4;
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    263a:	98 89       	ldd	r25, Y+16	; 0x10
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	69 2f       	mov	r22, r25
    2640:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    264a:	e9 ce       	rjmp	.-558    	; 0x241e <main+0xf0>
			} else if (enterCounter == SECONDS_SECTION
    264c:	8f 85       	ldd	r24, Y+15	; 0x0f
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	a1 f4       	brne	.+40     	; 0x267a <main+0x34c>
    2652:	88 89       	ldd	r24, Y+16	; 0x10
    2654:	86 30       	cpi	r24, 0x06	; 6
    2656:	89 f4       	brne	.+34     	; 0x267a <main+0x34c>
					&& ((arrowPosition - 1) == 5)) {
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    2658:	98 89       	ldd	r25, Y+16	; 0x10
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	69 2f       	mov	r22, r25
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 7;
    2664:	87 e0       	ldi	r24, 0x07	; 7
    2666:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    2668:	98 89       	ldd	r25, Y+16	; 0x10
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	69 2f       	mov	r22, r25
    266e:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    2678:	d2 ce       	rjmp	.-604    	; 0x241e <main+0xf0>
			/** Handling the boundaries for (Hours - Minutes - Seconds) **/
			} else {
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    267a:	98 89       	ldd	r25, Y+16	; 0x10
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	69 2f       	mov	r22, r25
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition--;
    2686:	88 89       	ldd	r24, Y+16	; 0x10
    2688:	81 50       	subi	r24, 0x01	; 1
    268a:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    268c:	98 89       	ldd	r25, Y+16	; 0x10
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	69 2f       	mov	r22, r25
    2692:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    269c:	c0 ce       	rjmp	.-640    	; 0x241e <main+0xf0>
			}
			break;
		case 'E': // Enter
			enterCounter++;
    269e:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8f 87       	std	Y+15, r24	; 0x0f
			if (enterCounter == MINUTES_SECTION) {
    26a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	89 f4       	brne	.+34     	; 0x26cc <main+0x39e>
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    26aa:	98 89       	ldd	r25, Y+16	; 0x10
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	69 2f       	mov	r22, r25
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 3;
    26b6:	83 e0       	ldi	r24, 0x03	; 3
    26b8:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    26ba:	98 89       	ldd	r25, Y+16	; 0x10
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	69 2f       	mov	r22, r25
    26c0:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    26ca:	a9 ce       	rjmp	.-686    	; 0x241e <main+0xf0>
			} else if (enterCounter == SECONDS_SECTION) {
    26cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	89 f4       	brne	.+34     	; 0x26f4 <main+0x3c6>
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    26d2:	98 89       	ldd	r25, Y+16	; 0x10
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	69 2f       	mov	r22, r25
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 6;
    26de:	86 e0       	ldi	r24, 0x06	; 6
    26e0:	88 8b       	std	Y+16, r24	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    26e2:	98 89       	ldd	r25, Y+16	; 0x10
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	69 2f       	mov	r22, r25
    26e8:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    26f2:	95 ce       	rjmp	.-726    	; 0x241e <main+0xf0>
			} else {
				enterCounter = HOURS_SECTION;
    26f4:	1f 86       	std	Y+15, r1	; 0x0f
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    26f6:	98 89       	ldd	r25, Y+16	; 0x10
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	69 2f       	mov	r22, r25
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				arrowPosition = 0;
    2702:	18 8a       	std	Y+16, r1	; 0x10
				HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    2704:	98 89       	ldd	r25, Y+16	; 0x10
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	69 2f       	mov	r22, r25
    270a:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
				HLCD_enDisplayCustomPattern(1);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
    2714:	84 ce       	rjmp	.-760    	; 0x241e <main+0xf0>
			}
			break;
		case 'C': // Clear + Long Press for Stop Timer
			enterCounter = HOURS_SECTION;
    2716:	1f 86       	std	Y+15, r1	; 0x0f
			HLCD_enClearDisplay();
    2718:	0e 94 3e 10 	call	0x207c	; 0x207c <HLCD_enClearDisplay>
			HLCD_enSendString("00:00:00");
    271c:	80 e6       	ldi	r24, 0x60	; 96
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD_enSendString>
			arrowPosition = 0;
    2724:	18 8a       	std	Y+16, r1	; 0x10
			HLCD_enGoToXY(LCD_SECOND_ROW, arrowPosition);
    2726:	98 89       	ldd	r25, Y+16	; 0x10
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	69 2f       	mov	r22, r25
    272c:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
			HLCD_enDisplayCustomPattern(1);
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
			HLED_enDisable(&led1);
    2736:	ce 01       	movw	r24, r28
    2738:	88 96       	adiw	r24, 0x28	; 40
    273a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <HLED_enDisable>
			hoursNum1   = 0;
    273e:	1e 8a       	std	Y+22, r1	; 0x16
			hoursNum2   = 0;
    2740:	1d 8a       	std	Y+21, r1	; 0x15
			minutesNum1 = 0;
    2742:	1c 8a       	std	Y+20, r1	; 0x14
			minutesNum2 = 0;
    2744:	1b 8a       	std	Y+19, r1	; 0x13
			secondsNum1 = 0;
    2746:	1a 8a       	std	Y+18, r1	; 0x12
			secondsNum2 = 0;
    2748:	19 8a       	std	Y+17, r1	; 0x11
    274a:	69 ce       	rjmp	.-814    	; 0x241e <main+0xf0>
			break;
		case 'S': // Start
			/** Handling not to Take Action if Timer is not Set **/
			if (hoursNum1 == 0 && hoursNum2 == 0 && minutesNum1 == 0
    274c:	8e 89       	ldd	r24, Y+22	; 0x16
    274e:	88 23       	and	r24, r24
    2750:	81 f4       	brne	.+32     	; 0x2772 <main+0x444>
    2752:	8d 89       	ldd	r24, Y+21	; 0x15
    2754:	88 23       	and	r24, r24
    2756:	69 f4       	brne	.+26     	; 0x2772 <main+0x444>
    2758:	8c 89       	ldd	r24, Y+20	; 0x14
    275a:	88 23       	and	r24, r24
    275c:	51 f4       	brne	.+20     	; 0x2772 <main+0x444>
    275e:	8b 89       	ldd	r24, Y+19	; 0x13
    2760:	88 23       	and	r24, r24
    2762:	39 f4       	brne	.+14     	; 0x2772 <main+0x444>
    2764:	8a 89       	ldd	r24, Y+18	; 0x12
    2766:	88 23       	and	r24, r24
    2768:	21 f4       	brne	.+8      	; 0x2772 <main+0x444>
    276a:	89 89       	ldd	r24, Y+17	; 0x11
    276c:	88 23       	and	r24, r24
    276e:	09 f4       	brne	.+2      	; 0x2772 <main+0x444>
    2770:	56 ce       	rjmp	.-852    	; 0x241e <main+0xf0>
					&& minutesNum2 == 0 && secondsNum1 == 0
					&& secondsNum2 == 0) {
				// No Action
			} else {
				enterCounter = 0;
    2772:	1f 86       	std	Y+15, r1	; 0x0f
				/** Clear Arrow **/
				HLCD_enClearCharachter(LCD_SECOND_ROW, arrowPosition, 1);
    2774:	98 89       	ldd	r25, Y+16	; 0x10
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	69 2f       	mov	r22, r25
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 4c 10 	call	0x2098	; 0x2098 <HLCD_enClearCharachter>
				while (1) {
					/***** Exiting From Loop when C Pressed *****/
					HKEYPAD_enGetPressedKey(&pressedKey);
    2780:	ce 01       	movw	r24, r28
    2782:	87 96       	adiw	r24, 0x27	; 39
    2784:	0e 94 11 11 	call	0x2222	; 0x2222 <HKEYPAD_enGetPressedKey>
					if (pressedKey == 'C') {
    2788:	8f a1       	ldd	r24, Y+39	; 0x27
    278a:	83 34       	cpi	r24, 0x43	; 67
    278c:	09 f4       	brne	.+2      	; 0x2790 <main+0x462>
    278e:	47 ce       	rjmp	.-882    	; 0x241e <main+0xf0>
						break;
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	a8 ec       	ldi	r26, 0xC8	; 200
    2796:	b2 e4       	ldi	r27, 0x42	; 66
    2798:	8b 87       	std	Y+11, r24	; 0x0b
    279a:	9c 87       	std	Y+12, r25	; 0x0c
    279c:	ad 87       	std	Y+13, r26	; 0x0d
    279e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a e7       	ldi	r20, 0x7A	; 122
    27ae:	55 e4       	ldi	r21, 0x45	; 69
    27b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	8f 83       	std	Y+7, r24	; 0x07
    27ba:	98 87       	std	Y+8, r25	; 0x08
    27bc:	a9 87       	std	Y+9, r26	; 0x09
    27be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	5f e3       	ldi	r21, 0x3F	; 63
    27d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <main+0x4b4>
		__ticks = 1;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	3f c0       	rjmp	.+126    	; 0x2860 <main+0x532>
	else if (__tmp > 65535)
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	3f ef       	ldi	r19, 0xFF	; 255
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	57 e4       	ldi	r21, 0x47	; 71
    27f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	4c f5       	brge	.+82     	; 0x284c <main+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2800:	9e 85       	ldd	r25, Y+14	; 0x0e
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <main+0x514>
    2824:	80 e9       	ldi	r24, 0x90	; 144
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	8b 83       	std	Y+3, r24	; 0x03
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <main+0x502>
    2834:	9c 83       	std	Y+4, r25	; 0x04
    2836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
    2844:	9e 81       	ldd	r25, Y+6	; 0x06
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	69 f7       	brne	.-38     	; 0x2824 <main+0x4f6>
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <main+0x546>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	8d 81       	ldd	r24, Y+5	; 0x05
    2862:	9e 81       	ldd	r25, Y+6	; 0x06
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <main+0x53e>
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
					}
					/***** Exiting From Loop when C Pressed *****/
					// 750 --> 1 Second
					_delay_ms(100);
					if (secondsNum1 == 0 && secondsNum2 == 0) {
    2874:	8a 89       	ldd	r24, Y+18	; 0x12
    2876:	88 23       	and	r24, r24
    2878:	09 f0       	breq	.+2      	; 0x287c <main+0x54e>
    287a:	46 c1       	rjmp	.+652    	; 0x2b08 <main+0x7da>
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	88 23       	and	r24, r24
    2880:	09 f0       	breq	.+2      	; 0x2884 <main+0x556>
    2882:	42 c1       	rjmp	.+644    	; 0x2b08 <main+0x7da>
						if (minutesNum1 == 0 && minutesNum2 == 0) {
    2884:	8c 89       	ldd	r24, Y+20	; 0x14
    2886:	88 23       	and	r24, r24
    2888:	09 f0       	breq	.+2      	; 0x288c <main+0x55e>
    288a:	ce c0       	rjmp	.+412    	; 0x2a28 <main+0x6fa>
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	88 23       	and	r24, r24
    2890:	09 f0       	breq	.+2      	; 0x2894 <main+0x566>
    2892:	ca c0       	rjmp	.+404    	; 0x2a28 <main+0x6fa>
							if (hoursNum1 == 0 && hoursNum2 == 0) {
    2894:	8e 89       	ldd	r24, Y+22	; 0x16
    2896:	88 23       	and	r24, r24
    2898:	d1 f4       	brne	.+52     	; 0x28ce <main+0x5a0>
    289a:	8d 89       	ldd	r24, Y+21	; 0x15
    289c:	88 23       	and	r24, r24
    289e:	b9 f4       	brne	.+46     	; 0x28ce <main+0x5a0>
								/***** Timer Finish Action ****/
								HLCD_enGoToXY(LCD_SECOND_ROW, 0);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enDisplayCustomPattern(2);
    28a8:	82 e0       	ldi	r24, 0x02	; 2
    28aa:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
								HLCD_enSendString("   Its Time");
    28ae:	89 e6       	ldi	r24, 0x69	; 105
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD_enSendString>
								HLCD_enGoToXY(LCD_SECOND_ROW, 15);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	6f e0       	ldi	r22, 0x0F	; 15
    28ba:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enDisplayCustomPattern(2);
    28be:	82 e0       	ldi	r24, 0x02	; 2
    28c0:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_enDisplayCustomPattern>
								HLED_enEnable(&led1);
    28c4:	ce 01       	movw	r24, r28
    28c6:	88 96       	adiw	r24, 0x28	; 40
    28c8:	0e 94 6f 0a 	call	0x14de	; 0x14de <HLED_enEnable>
    28cc:	a8 cd       	rjmp	.-1200   	; 0x241e <main+0xf0>
								break;
								/***** Timer Finish Action ****/
							} else if (hoursNum2 == 0) {
    28ce:	8d 89       	ldd	r24, Y+21	; 0x15
    28d0:	88 23       	and	r24, r24
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <main+0x5a8>
    28d4:	5c c0       	rjmp	.+184    	; 0x298e <main+0x660>
								hoursNum1--;
    28d6:	8e 89       	ldd	r24, Y+22	; 0x16
    28d8:	81 50       	subi	r24, 0x01	; 1
    28da:	8e 8b       	std	Y+22, r24	; 0x16
								HLCD_enGoToXY(LCD_FIRST_ROW, 0);
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(hoursNum1);
    28e4:	8e 89       	ldd	r24, Y+22	; 0x16
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								hoursNum2 = 9;
    28f6:	89 e0       	ldi	r24, 0x09	; 9
    28f8:	8d 8b       	std	Y+21, r24	; 0x15
								HLCD_enGoToXY(LCD_FIRST_ROW, 1);
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	61 e0       	ldi	r22, 0x01	; 1
    28fe:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(hoursNum2);
    2902:	8d 89       	ldd	r24, Y+21	; 0x15
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								/***** Return Minutes to 59 ****/
								minutesNum1 = 5;
    2914:	85 e0       	ldi	r24, 0x05	; 5
    2916:	8c 8b       	std	Y+20, r24	; 0x14
								minutesNum2 = 9;
    2918:	89 e0       	ldi	r24, 0x09	; 9
    291a:	8b 8b       	std	Y+19, r24	; 0x13
								HLCD_enGoToXY(LCD_FIRST_ROW, 4);
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	64 e0       	ldi	r22, 0x04	; 4
    2920:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(minutesNum2);
    2924:	8b 89       	ldd	r24, Y+19	; 0x13
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								HLCD_enGoToXY(LCD_FIRST_ROW, 3);
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	63 e0       	ldi	r22, 0x03	; 3
    293a:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(minutesNum1);
    293e:	8c 89       	ldd	r24, Y+20	; 0x14
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	a0 e0       	ldi	r26, 0x00	; 0
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								/***** Return Minutes to 59 ****/

								/***** Return Seconds to 59 ****/
								secondsNum1 = 5;
    2950:	85 e0       	ldi	r24, 0x05	; 5
    2952:	8a 8b       	std	Y+18, r24	; 0x12
								secondsNum2 = 9;
    2954:	89 e0       	ldi	r24, 0x09	; 9
    2956:	89 8b       	std	Y+17, r24	; 0x11
								HLCD_enGoToXY(LCD_FIRST_ROW, 7);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	67 e0       	ldi	r22, 0x07	; 7
    295c:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(secondsNum2);
    2960:	89 89       	ldd	r24, Y+17	; 0x11
    2962:	88 2f       	mov	r24, r24
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								HLCD_enGoToXY(LCD_FIRST_ROW, 6);
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	66 e0       	ldi	r22, 0x06	; 6
    2976:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(secondsNum1);
    297a:	8a 89       	ldd	r24, Y+18	; 0x12
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a0 e0       	ldi	r26, 0x00	; 0
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
    298c:	f9 ce       	rjmp	.-526    	; 0x2780 <main+0x452>
								/***** Return Seconds to 59 ****/
							} else {
								hoursNum2--;
    298e:	8d 89       	ldd	r24, Y+21	; 0x15
    2990:	81 50       	subi	r24, 0x01	; 1
    2992:	8d 8b       	std	Y+21, r24	; 0x15
								HLCD_enGoToXY(LCD_FIRST_ROW, 1);
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	61 e0       	ldi	r22, 0x01	; 1
    2998:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(hoursNum2);
    299c:	8d 89       	ldd	r24, Y+21	; 0x15
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a0 e0       	ldi	r26, 0x00	; 0
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								/***** Return Minutes to 59 ****/
								minutesNum1 = 5;
    29ae:	85 e0       	ldi	r24, 0x05	; 5
    29b0:	8c 8b       	std	Y+20, r24	; 0x14
								minutesNum2 = 9;
    29b2:	89 e0       	ldi	r24, 0x09	; 9
    29b4:	8b 8b       	std	Y+19, r24	; 0x13
								HLCD_enGoToXY(LCD_FIRST_ROW, 4);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	64 e0       	ldi	r22, 0x04	; 4
    29ba:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(minutesNum2);
    29be:	8b 89       	ldd	r24, Y+19	; 0x13
    29c0:	88 2f       	mov	r24, r24
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								HLCD_enGoToXY(LCD_FIRST_ROW, 3);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	63 e0       	ldi	r22, 0x03	; 3
    29d4:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(minutesNum1);
    29d8:	8c 89       	ldd	r24, Y+20	; 0x14
    29da:	88 2f       	mov	r24, r24
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a0 e0       	ldi	r26, 0x00	; 0
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								/***** Return Minutes to 59 ****/

								/***** Return Seconds to 59 ****/
								secondsNum1 = 5;
    29ea:	85 e0       	ldi	r24, 0x05	; 5
    29ec:	8a 8b       	std	Y+18, r24	; 0x12
								secondsNum2 = 9;
    29ee:	89 e0       	ldi	r24, 0x09	; 9
    29f0:	89 8b       	std	Y+17, r24	; 0x11
								HLCD_enGoToXY(LCD_FIRST_ROW, 7);
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	67 e0       	ldi	r22, 0x07	; 7
    29f6:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(secondsNum2);
    29fa:	89 89       	ldd	r24, Y+17	; 0x11
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 e0       	ldi	r26, 0x00	; 0
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	bc 01       	movw	r22, r24
    2a06:	cd 01       	movw	r24, r26
    2a08:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
								HLCD_enGoToXY(LCD_FIRST_ROW, 6);
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	66 e0       	ldi	r22, 0x06	; 6
    2a10:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
								HLCD_enSendIntegerNumber(secondsNum1);
    2a14:	8a 89       	ldd	r24, Y+18	; 0x12
    2a16:	88 2f       	mov	r24, r24
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e0       	ldi	r26, 0x00	; 0
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
    2a26:	ac ce       	rjmp	.-680    	; 0x2780 <main+0x452>
								/***** Return Seconds to 59 ****/
							}
						} else if (minutesNum2 == 0) {
    2a28:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2a:	88 23       	and	r24, r24
    2a2c:	f1 f5       	brne	.+124    	; 0x2aaa <main+0x77c>
							minutesNum1--;
    2a2e:	8c 89       	ldd	r24, Y+20	; 0x14
    2a30:	81 50       	subi	r24, 0x01	; 1
    2a32:	8c 8b       	std	Y+20, r24	; 0x14
							HLCD_enGoToXY(LCD_FIRST_ROW, 3);
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	63 e0       	ldi	r22, 0x03	; 3
    2a38:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(minutesNum1);
    2a3c:	8c 89       	ldd	r24, Y+20	; 0x14
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e0       	ldi	r26, 0x00	; 0
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	bc 01       	movw	r22, r24
    2a48:	cd 01       	movw	r24, r26
    2a4a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
							minutesNum2 = 9;
    2a4e:	89 e0       	ldi	r24, 0x09	; 9
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
							HLCD_enGoToXY(LCD_FIRST_ROW, 4);
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	64 e0       	ldi	r22, 0x04	; 4
    2a56:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(minutesNum2);
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a0 e0       	ldi	r26, 0x00	; 0
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
							/***** Return Seconds to 59 ****/
							secondsNum1 = 5;
    2a6c:	85 e0       	ldi	r24, 0x05	; 5
    2a6e:	8a 8b       	std	Y+18, r24	; 0x12
							secondsNum2 = 9;
    2a70:	89 e0       	ldi	r24, 0x09	; 9
    2a72:	89 8b       	std	Y+17, r24	; 0x11
							HLCD_enGoToXY(LCD_FIRST_ROW, 7);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	67 e0       	ldi	r22, 0x07	; 7
    2a78:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(secondsNum2);
    2a7c:	89 89       	ldd	r24, Y+17	; 0x11
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
							HLCD_enGoToXY(LCD_FIRST_ROW, 6);
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	66 e0       	ldi	r22, 0x06	; 6
    2a92:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(secondsNum1);
    2a96:	8a 89       	ldd	r24, Y+18	; 0x12
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 e0       	ldi	r26, 0x00	; 0
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
    2aa8:	6b ce       	rjmp	.-810    	; 0x2780 <main+0x452>
							/***** Return Seconds to 59 ****/
						} else {
							minutesNum2--;
    2aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2aac:	81 50       	subi	r24, 0x01	; 1
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
							HLCD_enGoToXY(LCD_FIRST_ROW, 4);
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	64 e0       	ldi	r22, 0x04	; 4
    2ab4:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(minutesNum2);
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e0       	ldi	r26, 0x00	; 0
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
							/***** Return Seconds to 59 ****/
							secondsNum1 = 5;
    2aca:	85 e0       	ldi	r24, 0x05	; 5
    2acc:	8a 8b       	std	Y+18, r24	; 0x12
							secondsNum2 = 9;
    2ace:	89 e0       	ldi	r24, 0x09	; 9
    2ad0:	89 8b       	std	Y+17, r24	; 0x11
							HLCD_enGoToXY(LCD_FIRST_ROW, 7);
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	67 e0       	ldi	r22, 0x07	; 7
    2ad6:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(secondsNum2);
    2ada:	89 89       	ldd	r24, Y+17	; 0x11
    2adc:	88 2f       	mov	r24, r24
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	a0 e0       	ldi	r26, 0x00	; 0
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
							HLCD_enGoToXY(LCD_FIRST_ROW, 6);
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	66 e0       	ldi	r22, 0x06	; 6
    2af0:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
							HLCD_enSendIntegerNumber(secondsNum1);
    2af4:	8a 89       	ldd	r24, Y+18	; 0x12
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
    2b06:	3c ce       	rjmp	.-904    	; 0x2780 <main+0x452>
							/***** Return Seconds to 59 ****/
						}
					} else if (secondsNum2 == 0) {
    2b08:	89 89       	ldd	r24, Y+17	; 0x11
    2b0a:	88 23       	and	r24, r24
    2b0c:	01 f5       	brne	.+64     	; 0x2b4e <main+0x820>
						secondsNum1--;
    2b0e:	8a 89       	ldd	r24, Y+18	; 0x12
    2b10:	81 50       	subi	r24, 0x01	; 1
    2b12:	8a 8b       	std	Y+18, r24	; 0x12
						HLCD_enGoToXY(LCD_FIRST_ROW, 6);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	66 e0       	ldi	r22, 0x06	; 6
    2b18:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
						HLCD_enSendIntegerNumber(secondsNum1);
    2b1c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	a0 e0       	ldi	r26, 0x00	; 0
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
						secondsNum2 = 9;
    2b2e:	89 e0       	ldi	r24, 0x09	; 9
    2b30:	89 8b       	std	Y+17, r24	; 0x11
						HLCD_enGoToXY(LCD_FIRST_ROW, 7);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	67 e0       	ldi	r22, 0x07	; 7
    2b36:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
						HLCD_enSendIntegerNumber(secondsNum2);
    2b3a:	89 89       	ldd	r24, Y+17	; 0x11
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	a0 e0       	ldi	r26, 0x00	; 0
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
    2b4c:	19 ce       	rjmp	.-974    	; 0x2780 <main+0x452>
					} else {
						secondsNum2--;
    2b4e:	89 89       	ldd	r24, Y+17	; 0x11
    2b50:	81 50       	subi	r24, 0x01	; 1
    2b52:	89 8b       	std	Y+17, r24	; 0x11
						HLCD_enGoToXY(LCD_FIRST_ROW, 7);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	67 e0       	ldi	r22, 0x07	; 7
    2b58:	0e 94 12 10 	call	0x2024	; 0x2024 <HLCD_enGoToXY>
						HLCD_enSendIntegerNumber(secondsNum2);
    2b5c:	89 89       	ldd	r24, Y+17	; 0x11
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	a0 e0       	ldi	r26, 0x00	; 0
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <HLCD_enSendIntegerNumber>
    2b6e:	08 ce       	rjmp	.-1008   	; 0x2780 <main+0x452>

00002b70 <__udivmodqi4>:
    2b70:	99 1b       	sub	r25, r25
    2b72:	79 e0       	ldi	r23, 0x09	; 9
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <__udivmodqi4_ep>

00002b76 <__udivmodqi4_loop>:
    2b76:	99 1f       	adc	r25, r25
    2b78:	96 17       	cp	r25, r22
    2b7a:	08 f0       	brcs	.+2      	; 0x2b7e <__udivmodqi4_ep>
    2b7c:	96 1b       	sub	r25, r22

00002b7e <__udivmodqi4_ep>:
    2b7e:	88 1f       	adc	r24, r24
    2b80:	7a 95       	dec	r23
    2b82:	c9 f7       	brne	.-14     	; 0x2b76 <__udivmodqi4_loop>
    2b84:	80 95       	com	r24
    2b86:	08 95       	ret

00002b88 <__divmodsi4>:
    2b88:	97 fb       	bst	r25, 7
    2b8a:	09 2e       	mov	r0, r25
    2b8c:	05 26       	eor	r0, r21
    2b8e:	0e d0       	rcall	.+28     	; 0x2bac <__divmodsi4_neg1>
    2b90:	57 fd       	sbrc	r21, 7
    2b92:	04 d0       	rcall	.+8      	; 0x2b9c <__divmodsi4_neg2>
    2b94:	14 d0       	rcall	.+40     	; 0x2bbe <__udivmodsi4>
    2b96:	0a d0       	rcall	.+20     	; 0x2bac <__divmodsi4_neg1>
    2b98:	00 1c       	adc	r0, r0
    2b9a:	38 f4       	brcc	.+14     	; 0x2baa <__divmodsi4_exit>

00002b9c <__divmodsi4_neg2>:
    2b9c:	50 95       	com	r21
    2b9e:	40 95       	com	r20
    2ba0:	30 95       	com	r19
    2ba2:	21 95       	neg	r18
    2ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ba8:	5f 4f       	sbci	r21, 0xFF	; 255

00002baa <__divmodsi4_exit>:
    2baa:	08 95       	ret

00002bac <__divmodsi4_neg1>:
    2bac:	f6 f7       	brtc	.-4      	; 0x2baa <__divmodsi4_exit>
    2bae:	90 95       	com	r25
    2bb0:	80 95       	com	r24
    2bb2:	70 95       	com	r23
    2bb4:	61 95       	neg	r22
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	08 95       	ret

00002bbe <__udivmodsi4>:
    2bbe:	a1 e2       	ldi	r26, 0x21	; 33
    2bc0:	1a 2e       	mov	r1, r26
    2bc2:	aa 1b       	sub	r26, r26
    2bc4:	bb 1b       	sub	r27, r27
    2bc6:	fd 01       	movw	r30, r26
    2bc8:	0d c0       	rjmp	.+26     	; 0x2be4 <__udivmodsi4_ep>

00002bca <__udivmodsi4_loop>:
    2bca:	aa 1f       	adc	r26, r26
    2bcc:	bb 1f       	adc	r27, r27
    2bce:	ee 1f       	adc	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	a2 17       	cp	r26, r18
    2bd4:	b3 07       	cpc	r27, r19
    2bd6:	e4 07       	cpc	r30, r20
    2bd8:	f5 07       	cpc	r31, r21
    2bda:	20 f0       	brcs	.+8      	; 0x2be4 <__udivmodsi4_ep>
    2bdc:	a2 1b       	sub	r26, r18
    2bde:	b3 0b       	sbc	r27, r19
    2be0:	e4 0b       	sbc	r30, r20
    2be2:	f5 0b       	sbc	r31, r21

00002be4 <__udivmodsi4_ep>:
    2be4:	66 1f       	adc	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	88 1f       	adc	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	1a 94       	dec	r1
    2bee:	69 f7       	brne	.-38     	; 0x2bca <__udivmodsi4_loop>
    2bf0:	60 95       	com	r22
    2bf2:	70 95       	com	r23
    2bf4:	80 95       	com	r24
    2bf6:	90 95       	com	r25
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	bd 01       	movw	r22, r26
    2bfe:	cf 01       	movw	r24, r30
    2c00:	08 95       	ret

00002c02 <__prologue_saves__>:
    2c02:	2f 92       	push	r2
    2c04:	3f 92       	push	r3
    2c06:	4f 92       	push	r4
    2c08:	5f 92       	push	r5
    2c0a:	6f 92       	push	r6
    2c0c:	7f 92       	push	r7
    2c0e:	8f 92       	push	r8
    2c10:	9f 92       	push	r9
    2c12:	af 92       	push	r10
    2c14:	bf 92       	push	r11
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	ca 1b       	sub	r28, r26
    2c2c:	db 0b       	sbc	r29, r27
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	09 94       	ijmp

00002c3a <__epilogue_restores__>:
    2c3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c3c:	39 88       	ldd	r3, Y+17	; 0x11
    2c3e:	48 88       	ldd	r4, Y+16	; 0x10
    2c40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c50:	df 80       	ldd	r13, Y+7	; 0x07
    2c52:	ee 80       	ldd	r14, Y+6	; 0x06
    2c54:	fd 80       	ldd	r15, Y+5	; 0x05
    2c56:	0c 81       	ldd	r16, Y+4	; 0x04
    2c58:	1b 81       	ldd	r17, Y+3	; 0x03
    2c5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5e:	ce 0f       	add	r28, r30
    2c60:	d1 1d       	adc	r29, r1
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	ed 01       	movw	r28, r26
    2c6e:	08 95       	ret

00002c70 <_exit>:
    2c70:	f8 94       	cli

00002c72 <__stop_program>:
    2c72:	ff cf       	rjmp	.-2      	; 0x2c72 <__stop_program>
